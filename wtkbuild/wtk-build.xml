<?xml version="1.0"?>

<project name="RSSReader" default="build" basedir="." >

	<!-- IB 2010-03-08 1.11.4RC1 Use wtkjad to create non-Blackberry JAD/manifest file. -->
	<!-- IB 2010-03-08 1.11.4RC1 Use latest antenna 1.2.1 beta -->
	<!-- IB 2010-03-08 1.11.4RC1 Use latest proguard 4.5 beta3 -->
	<!-- IB 2010-03-08 1.11.4RC1 Use observer pattern for feed parsing to prevent hangs from spotty networks and bad URLs. -->
	<!-- IB 2010-03-08 1.11.4RC1 Use googlecode_upload.pl to upload to Google Project Hosting. -->
	<!-- IB 2010-03-08 1.11.4RC1 Create smartphone version with just MIDP 2.0.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Create archive files.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Don't create empty version directory.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use zip for src as the file paths are too long for non-GNU tar.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use - in cod files before version instead of _.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use project.file.prefix for project archives.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use STAGE in description.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Make test distribution target with only MIDP 2.0 and MIDP 2.0 with JSR-75.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Remove unneeded directories.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Create non JSR-75 smartphone/podcast version.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Create itunes test target.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Fix smartphone zip.  -->

	<property environment="env" />
	<property name="sony.location" value="C:/SONYER~1/JavaME_SDK_CLDC/PC_Emulation/WTK2/" />

	<property name="device.props" value="" />
	<property name="build.template" value="" />
	<property name="wtk.template" value="" />
	<property name="beta.vers" value="" />
	<echo message="build.template=${build.template}" />
	<echo message="wtk.properties=${wtk.properties}" />
	<echo message="wtk.template=${wtk.template}" />
	<echo message="release.template=${release.template}" />
	<echo message="test.template=${test.template}" />
	<echo message="optional.template=${optional.template}" />
	<echo message="DLOGDEF=${DLOGDEF}" />
	<echo message="presrc=" />
	<property name="DEBUG" value="DEBUG" />
	<property name="target" value="../target" />
	<property name="tmpres" value="${target}/tmpres" />
	<property name="webtestdata" value="${target}/webtestdata" />
	<property name="filetestdata" value="${target}/filetestdata" />
	<property name="analyze" value="${target}/analyze" />
	<property name="dist" value="${target}/dist" />
	<property name="distgooglecode" value="${target}/distgooglecode" />
	<property name="distproject" value="${target}/distproject" />
	<property name="distjardir" value="${distproject}/distjardir" />
	<property name="distall" value="${target}/distall" />
	<property name="main" value="${target}/main" />
	<property name="dist.midp10" value="${target}/dist/midp10" />
	<property name="dist.midp20" value="${target}/dist/midp20" />
	<property name="dist.midp20.novice" value="${target}/dist/midp20_novice" />
	<property name="dist.midp20.cldc11" value="${target}/dist/midp20_cldc11" />
	<property name="dist.midp20.jsr75" value="${target}/dist/midp20_jsr75" />
	<property name="dist.midp20.cldc11.jsr75" value="${target}/dist/midp20_cldc11_jsr75" />
	<property name="dist.midp20.itunes.jsr75" value="${target}/dist/midp20_itunes_jsr75" />
	<property name="dist.midp20.cldc11.itunes.jsr75" value="${target}/dist/midp20_cldc11_itunes_jsr75" />
	<property name="dist.midp20.jsr75_jsr238" value="${target}/dist/midp20_jsr75_jsr238" />
	<property name="build" value="${target}/build" />
	<property name="build.midp10" value="${target}/build/midp10" />
	<property name="build.midp20" value="${target}/build/midp20" />
	<property name="build.midp20.novice" value="${target}/build/midp20_novice" />
	<property name="build.midp20.cldc11" value="${target}/build/midp20_cldc11" />
	<property name="build.midp20.itunes.jsr75" value="${target}/build/midp20_itunes_jsr75" />
	<property name="build.midp20.jsr75" value="${target}/build/midp20_jsr75" />
	<property name="build.midp20.itunes.jsr75" value="${target}/build/midp20_itunes_jsr75" />
	<property name="build.midp20.cldc11.itunes.jsr75" value="${target}/build/midp20_cldc11_itunes_jsr75" />
	<property name="build.midp20.jsr75.jsr238" value="${target}/build/midp20_jsr75.jsr238" />
	<property name="classes" value="${target}/classes" />
	<property name="tmppreprocess" value="${target}/tmppreprocess" />
	<property name="ext.drive" value="${env.EXT_DRIVE}" />
	<property name="build.template" value="" />
	<property file="${basedir}/wtk-build${device.props}.properties${build.template}" />
	<property name="DFEATUREFORMDEF" value="DFEATUREFORMDEF" />
	<!-- DCOMPATDEF is used to test compatibility store/restore of date -->
	<property name="DCOMPATDEF" value="DNOCOMPAT" />
	<echo message="unproc.src=${unproc.src}" />
	<fail message="Must set comp.src to src directory to put the source to compile." unless="comp.src" />

	<!-- Define the tasks. -->

	<!-- clean up the project -->
	<target name="clean" >
		<echo message="deleting ${target}" />
		<delete dir="${target}" />
		<antcall target="clean.version" inheritAll="true" >
			<param name="wtk.template" value="" />
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
		</antcall>
	</target>

	<!-- clean up the compile -->
	<target name="clean.compile">
		<delete dir="${classes}" />
	</target>

	<!-- TODO -->
	<target name="clean.version">
		<delete dir="${classes}" />
	</target>

	<target name="test.prepare" unless="no.test" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<property name="test.template" value="" />
		<property file="${basedir}/test.properties${test.template}" />
		<antcall target="test.buildno" />
		<property file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="test.buildno" unless="test.buildinfo" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<buildnumber file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="Release buildinfo update." />
		<property name="test.buildno" value="true" />
	</target>

	<target name="release.prepare" unless="no.release" >
	    <echo message="Using release properties" />
		<property name="release.template" value="" />
		<property file="${basedir}/release.properties${release.template}" />
	    <echo message="RELEASE=${RELEASE}" />
	    <echo message="build.number=${build.number}" />
		<antcall target="release.buildno" />
		<property file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="release.buildno" unless="release.buildno" >
		<buildnumber file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="Release buildinfo update." />
		<property name="release.buildno" value="true" />
	</target>

	<target name="staging.prepare" unless="no.staging" >
	    <echo message="Using release staging properties" />
		<property file="${basedir}/staging.properties" />
	</target>

	<target name="prepare.stage" if="stage" >
	    <echo message="Using stage=${stage}" />
		<property name="stage.file" value="${stage}_" />
		<echo message="stage.file=${stage.file}" />
		<property name="dist.stage.file" value="_${stage}" />
		<echo message="dist.stage.file=${dist.stage.file}" />
		<echo message="ustage=${ustage}" />
	</target>

	<!-- prepare the target folder -->
	<target name="prepare" depends="test.prepare,release.prepare,prepare.stage" >
		<!-- Define the Wireless Toolkit home directory. Needed by the tasks. -->
		<!-- Define some additional properties for this project. Not required. -->
		<property name="optional.template" value="" />
		<property file="${basedir}/optional.properties${optional.template}" />
		<property name="propdir" value="${basedir}" />
		<property file="${basedir}/${wtk.properties}" />
		<!-- Note:  this value will not be used if novice is set before -->
		<!-- we get here (e.g. in target dist.midp.2.0.novice).  For the -->
		<!-- other targets, NOVICE will be false and therefore disabled -->
		<property name="NOVICE" value="false" />
		<property name="novice.txt" value="${src}/data/novice.txt" />
		<property name="stage" value="" />
		<property name="stage" value="" />
		<property name="ustage" value="" />
		<property name="stage.file" value="" />
		<property name="jsr75" value="" />
		<property name="smartphone" value="" />
		<property name="build.prefix" value="${file.prefix}${stage.file}" />
		<property name="build.file.root" value="${build.prefix}${project.name}-${FMIDLETVERSROOT}" />
		<property name="buildinfo" value="${SUFFIXVERS}-${stage.file}b${build.number}" />
		<!-- changed -->
		<mkdir dir="${target}" />
		<mkdir dir="${classes}" />
		<property name="EMULATOR" value="true" />
		<property name="svnexport" value="${build}/svnexport" />
		<property name="compiled" value="${build}/${build.prefix}pcompiled" />
		<property name="preverified" value="${build}/${build.prefix}preverified" />
		<property name="preprocessed" value="${build}/${build.prefix}preprocessed" />
		<property name="obfuscated" value="${build}/${build.prefix}obfuscated" />
		<filterset id="defile.filter" >
			<filter token="DMIDPVERS" value="//#define ${DMIDPVERS}" />
			<filter token="DCLDCVERS" value="//#define ${DCLDCVERS}" />
			<filter token="DFEATUREFORMDEF" value="//#define ${DFEATUREFORMDEF}" />
			<filter token="DFEATUREFORMIMPORTDEF" value="${DFEATUREFORMIMPORTDEF}" />
			<filter token="DITUNESDEF" value="//#define ${DITUNESDEF}" />
			<filter token="DJSR75" value="//#define ${DJSR75}" />
			<filter token="DJSR238" value="//#define ${DJSR238}" />
			<filter token="DTESTDEF" value="//#define ${DTESTDEF}" />
			<filter token="DJMTESTDEF" value="//#define ${DJMTESTDEF}" />
			<filter token="DCOMPATDEF" value="//#define ${DCOMPATDEF}" />
			<filter token="DTESTUIDEF" value="//#define ${DTESTUIDEF}" />
			<filter token="DLOGDEF" value="//#define ${DLOGDEF}" />
			<filter token="PROGVERS" value="${buildinfo}" />
		</filterset>
		<filterset id="midlet.info" >
			<filter token="MIDPVERS" value="${wtk.midp.version}" />
			<filter token="CLDCVERS" value="${wtk.cldc.version}" />
			<filter token="MIDLETVERS" value="${MIDLETVERS}" />
			<filter token="PROGVERS" value="${buildinfo}" />
			<filter token="JMIDPVERS" value="${JMIDPVERS}" />
			<filter token="JCLDCVERS" value="${JCLDCVERS}" />
			<filter token="PERMISSIONS" value="${PERMISSIONS}" />
			<filter token="EMULATOR" value="${EMULATOR}" />
			<filter token="NOVICE" value="${NOVICE}" />
		</filterset>

	</target>

    <echo message="location='${antenna.home}/${antenna.jar}'" />
	<taskdef resource="antenna.properties" >
	  <classpath>
		<pathelement location="${antenna.home}/${antenna.jar}" />
	  </classpath>
	</taskdef>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${antcontrib.home}/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

	<!--
	<taskdef resource="svntask.properties" >
	  <classpath>
		<pathelement location="${svnant.home}/svnant.jar" />
		<pathelement location="${svnant.home}/svnClientAdapter.jar" />
	  </classpath>
	</taskdef>
	-->

	<!--
	<taskdef resource="com/idaremedia/svn4ant/client/antlib.xml" >
	  <classpath>
		<pathelement location="${svnant.home}/dependencies/antx/lib/AntX_tasks.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/lib/JWare_apis.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/src.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/ganymed.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit-cli.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit.jar" />
	  </classpath>
	</taskdef>
	-->

	<target name="display.props" >
	    <echo message="project.name=${project.name}" />
	    <echo message="wtk.home=${wtk.home}" />
	    <echo message="wtk.midp.jar=${wtk.midp.jar}" />
	    <echo message="build.compiler=${build.compiler}" />
	    <echo message="src=${src}" />
	    <echo message="presrc=${presrc}" />
	    <echo message="compat.presrc=${compat.presrc}" />
	    <echo message="testui.presrc=${testui.presrc}" />
	    <echo message="build.number=${build.number}" />
	    <echo message="novice=${novice}" />
	    <echo message="novice.txt=${novice.txt}" />
	    <echo message="NOVICE=${NOVICE}" />
	    <echo message="DMIDPVERS=${DMIDPVERS}" />
	    <echo message="DCLDCVERS=${DCLDCVERS}" />
	    <echo message="DITUNESDEF=${DITUNESDEF}" />
	    <echo message="DJSR75=${DJSR75}" />
	    <echo message="DJSR238=${DJSR238}" />
	    <echo message="DTESTDEF=${DTESTDEF}" />
	    <echo message="DJMTESTDEF=${DJMTESTDEF}" />
	    <echo message="DTESTUIDEF=${DTESTUIDEF}" />
	    <echo message="DCOMPATDEF=${DCOMPATDEF}" />
	    <echo message="wtk.optionalpda.enabled=${wtk.optionalpda.enabled}" />
	    <echo message="DLOGDEF=${DLOGDEF}" />
	    <echo message="no.test=${no.test}" />
	    <echo message="no.staging=${no.staging}" />
	    <echo message="no.release=${no.release}" />
	    <echo message="need.test.res=${need.test.res}" />
	    <echo message="manifestsrc=${manifestsrc}" />
	    <echo message="MIDLETURL_ROOT=${MIDLETURL_ROOT}" />
	    <echo message="separator=${separator}" />
	</target>

	<!-- Preprocess source using antenna preprocessor.  If preproccess -->
	<!-- is not used, this copies the src to the directory to compile -->
	<!-- comp.src. -->
	<target name="preprocess" depends="prepare" if="presrc" >
		<antcall target="display.props" />
		<!-- Delete directory to compile so that we start fresh for cases -->
		<!-- when we delete a file. -->
		<delete dir="${comp.src}" />
		<mkdir dir="${comp.src}" />
		<!-- Copy unpreprocessed source to compiled src dir -->
		<antcall target="copy.unproc.comp" />
		<delete dir="${tmppreprocess}" />
		<property name="preprocess.defines" value="DEBUG=WARN,${DMIDPVERS},${DCLDCVERS},${DITUNESDEF},${DJSR75},${DJSR238},${DTESTDEF},${DJMTESTDEF},${DLOGDEF},${DTESTUIDEF},${DCOMPATDEF}" />
		<echo message="preprocess.defines=${preprocess.defines}" />
		<mkdir dir="${tmppreprocess}" />
		<wtkpreprocess srcdir="${presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="yes" />
		<echo message="Preprocess JMUnit pre src if set ${jmunit.src}." />
		<wtkpreprocess srcdir="${jmunit.src}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="jmunit.src" />
		<echo message="Preprocess test UI if set ${testui.presrc}." />
		<wtkpreprocess srcdir="${testui.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="testui.presrc" />
		<echo message="Preprocess compatiblity code if set ${compat.presrc}." />
		<wtkpreprocess srcdir="${compat.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="compat.presrc" />
		<echo message="Preprocess jar src if set ${jar.presrc}." />
		<wtkpreprocess srcdir="${jar.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="jar.presrc" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${tmppreprocess}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${comp.src}" />
		</antcall>
		<antcall target="wtk.src.copy" />
		<zip destfile="${zipdir}/${build.prefix}src.zip" basedir="${comp.src}" update="true" />
	</target>

	<!-- Copy preprocessed src to unprocessed source to allow the -->
	<!-- src to be checked in or compiled with Netbeans -->
	<target name="copy.comp.src" depends="prepare" if="unproc.src" >
		<copy todir="${src}" overwrite="true" >
			<!-- remove compatibility classes as these are kept in compatsrc -->
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${src}" />
		</antcall>
	</target>

	<!-- Delete preprocessed test src in src -->
	<target name="delete.test.src" depends="prepare" if="no.test">
		<echo message="Deleting test src ${dsrc}." />
		<delete includeemptydirs="true" failonerror="false" >
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${dsrc}" includes="**/Compatibility*,**/testutil/**,**/testlcdui/*.java" />
			<fileset dir="${dsrc}/net/sf" />
		</delete>
	</target>

	<target name="copy.unproc.comp" depends="prepare" if="unproc.src" >
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${unproc.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="copy.comp.svn" depends="prepare" if="copy.comp.svn" >
		<copy todir="${src}" overwrite="true" >
			<fileset dir="${comp.src}" />
		</copy>
	</target>

	<target name="wtk.src.copy" if="wtk.src" >
		<delete includeEmptyDirs="true" >
			<fileset dir="${wtk.src}" includes="**/*.java" />
		</delete>
		<copy todir="${wtk.src}" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<path id="project.classpath">
		<pathelement location="lib/JLogMicro.jar" />
	</path>

	<path id="jde.classpath">
		<pathelement location="${jde.home}/bin/rapc.jar" />
	</path>

	<target name="compile" depends="prepare">

		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->

		<antcall target="preprocess" />
		<!-- Compile everything, but don't preverify (yet). -->
		<antcall target="display.props" />

		<echo message="add.jars=${add.jars}" />
		<antcall target="add.jars" />
		<antcall target="copy.jar.src" />
		<antcall target="wtk.src.copy" />
		<antcall target="display.props" />
		<echo message="comp.src=${comp.src}" />
		<wtkbuild srcdir="${comp.src}" destdir="${classes}" preverify="false" depend="yes" unless="ecj.jar" />
		<antcall target="ecj.compile" />
		<antcall target="findbugs" />
		<antcall target="pmd" />
	</target>

	<target name="ecj.compile" if="ecj.jar" >
		<echo message="-bootclasspath" />
		<echo message="wtk.midpapi=${wtk.midpapi}" />
		<echo message="-classpath" />
		<echo message="${rt.jar}" />
		<echo message="-d" />
		<echo message="${classes}" />
		<echo message="${comp.src}" />
		<java jar="${ecj.jar}" fork="true" >
			<arg value="-bootclasspath" />
			<arg value="${wtk.midpapi}" />
			<!--
			<arg value="${ecj.bootclasspath}" />
			<arg value="${wtk.home}/lib/${wtk.midp.jar}" />
			-->
			<arg value="-classpath" />
			<arg value="${rt.jar}" />
			<arg value="-d" />
			<arg value="${classes}" />
			<arg value="${comp.src}" />
		</java>
	</target>

	<target name="findbugs" depends="prepare" if="findbugs.home" >
    	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
		<mkdir dir="${analyze}" />
		<findbugs home="${findbugs.home}"
			  jvmargs="-Xms512m -Xmx1024m"
              output="html" reportLevel="medium"
              outputFile="${analyze}/findbugs-${build.file.root}.html"
              stylesheet="plain.xsl" >
      <auxClasspath>
		  <pathelement location="${findbug.classes}" />
		  <fileset dir="${wtk.home}/lib" >
			  <include name="*.jar" />
		  </fileset>
		  <fileset dir="${wtk.home}/bin" >
			  <include name="*.jar" />
		  </fileset>
      </auxClasspath>
      <sourcePath path="${comp.src}" />
      <class location="${classes}" />
    </findbugs>
  </target>

	<path id="pmd.classpath">
		<fileset dir="${pmd.home}/lib/">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="pmd" depends="prepare" if="pmd.home" >
		<mkdir dir="${analyze}" />
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
		<pmd rulesetfiles="rulesets/favorites.xml" encoding="UTF-8" >
			  <!-- undo
			  <formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${analyze}/pmd-${build.file.root}.html"/>
			  -->
			  <formatter type="xml" toFile="${analyze}/pmd-${build.file.root}.xml"/>
			  <fileset dir="${comp.src}">
				  <include name="**/*.java"/>
			  </fileset>
		  </pmd>
		  <xslt style="${pmd.xsl}" in="${analyze}/pmd-${build.file.root}.xml" out="${analyze}/pmd-${build.file.root}.txt" />
		  <exec executable="${cat.cmd}" >
			  <arg value="${analyze}/pmd-${build.file.root}.txt" />
		  </exec>
	  </target>

	<target name="build.testdata" depends="prepare" >
		<echo message="project.test.url=${project.test.url}" />
		<delete dir="${webtestdata}" />
		<copy todir="${webtestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${webtestdata}" token="jar://" value="${project.test.url}" />
		<delete dir="${filetestdata}" />
		<copy todir="${filetestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${filetestdata}" token="jar://" value="${file.test.url}" />
	</target>

	<target name="add.jars" if="add.jars" >
		<unjar src="${ext.jar}" dest="${classes}" />
		<delete includeEmptyDirs="true" >
			<fileset dir="${classes}/META-INF" />
			<fileset dir="${classes}" includes="**/*.jad" />
			<fileset dir="${classes}" includes="**/*MIDlet*" />
		</delete>
	</target>

	<target name="copy.jar.src" if="copy.jar.src" >
		<copy todir="${comp.src}" >
			<fileset dir="${jarsrc}" excludes="**/*MIDlet*" />
		</copy>
	</target>

	<!-- Copy compatsrc to target src directory. -->
	<target name="copy.compat" if="copy.compat" >
		<echo message="copy.compat=${copy.compat}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${compat.src}" includes="**/*.java" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.testui" if="copy.testui" >
		<echo message="copy.testui=${copy.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.unproc.testui" if="copy.unproc.testui" >
		<echo message="copy.unproc.testui=${copy.unproc.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<target name="copy.res" if="need.res" >
		<copy todir="${tmpres}/${res.todir}" >
			<fileset dir="${res.dir}" />
		</copy>
	</target>

	<target name="copy.novice" if="novice" >
		<mkdir dir="${tmpres}/data" />
		<copy tofile="${tmpres}/data/novice.txt" >
			<fileset file="${novice.txt}" />
		</copy>
	</target>

	<target name="copy.test.res" if="need.test.res" >
		<copy todir="${tmpres}/${res.test.todir}" >
			<fileset dir="${res.test.dir}" />
		</copy>
	</target>

	<target name="build" depends="prepare" >
		<antcall target="display.props" />
		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->
		<mkdir dir="${bin}" />
		<delete dir="${tmpres}" />
		<mkdir dir="${tmpres}" />

		<antcall target="copy.res" />
		<antcall target="copy.novice" />
		<antcall target="copy.test.res" />

		<wtkjad jadfile="${bin}/${project.name}.jad" manifest="${bin}/manifest.mf" name="${project.name}" vendor="${vendor}" version="${MIDLETVERS}" encoding="UTF-8" >
			<midlet name="${project.name}" icon="/icons/rss.png" class="${midlet.class}" />
			<midlet name="RssSuite" class="com.substanceofcode.jmunit.businessentities.RssSuite" unless="no.test" />
			<midlet name="UtilitySuite" class="com.substanceofcode.jmunit.utils.UtilitySuite" unless="no.test" />
			<midlet name="RssFeedSuite" class="com.substanceofcode.jmunit.businessentities.RssFeedSuite" unless="no.test" />
			<midlet name="RssItemPerfCompatability4Test" class="com.substanceofcode.jmunit.businessentities.RssItemPerfCompatability4Test" unless="no.test" />
			<attribute name="MIDlet-Description" value="${project.description}" />
			<attribute name="MIDlet-Info-URL" value="${project.info.url}" />
			<attribute name="MIDlet-Permissions-Opt" value="${PERMISSIONS}" />
			<attribute name="MIDlet-Data-Size" value="3000" />
			<attribute name="MIDlet-Jar-URL" value="${build.file.root}.jar" />
			<attribute name="novice" value="${NOVICE}" />
			<attribute name="Program-Version" value="${buildinfo}" />
			<attribute name="jlomicro-level" value="${jlomicro-level}" unless="no.test" />
			<attribute name="jlomicro-handlers" value="${jlomicro-handlers}" unless="no.test" />
			<attribute name="jlomicro-ConsoleHandler-formatter" value="${jlomicro-ConsoleHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-FormHandler-limit" value="${jlomicro-FormHandler-limit}" unless="no.test" />
			<attribute name="jlomicro-FormHandler-formatter" value="${jlomicro-FormHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-RecStoreHandler-limit" value="${jlomicro-RecStoreHandler-limit}" unless="no.test" />
			<attribute name="jlomicro-RecStoreHandler-formatter" value="${jlomicro-RecStoreHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-com-substanceofcode-utils-SortUtil-level" value="${jlomicro-com-substanceofcode-utils-SortUtil-level}" unless="no.test" />
		</wtkjad>

		<echo message="MIDLETVERS=${MIDLETVERS}" />

		<!-- Package everything. Most of the necessary information is
             contained in the JAD file. Also preverify the result this
             time. To obfuscate everything, set the corresponding
             parameter to "true" (requires RetroGuard or ProGuard). The
             version parameter increments the MIDlet-Version by one. -->

	    <echo message="obfuscate=${obfuscate}" />
		<!-- package and preverify -->
		<wtkpackage jarfile="${bin}/${project.name}.jar" jadfile="${bin}/${project.name}.jad" manifest="${bin}/manifest.mf" cldc="${JCLDCVERS}" profile="${JMIDPVERS}" preverify="true" obfuscate="${obfuscate}" >

			<!-- Package our newly compiled classes and the
                 resources from the WTK's demo application. -->

			<fileset dir="${classes}" />
			<fileset dir="${tmpres}" />

		</wtkpackage>

		<wtkobfuscate jarfile="${bin}/${project.name}.jar" obfuscator="proguard" if="keep.obfuscate" >
			<argument value="-keep public class ${obfuscate.classes}" />
		</wtkobfuscate>
		<!-- Include version in the file so that they can be uploaded to -->
		<!-- download sites where the name must be unique.  -->

		<copy file="${bin}/${project.name}.jad" tofile="${bin}/${build.file.root}.jad" />
		<copy file="${bin}/${project.name}.jar" tofile="${bin}/${build.file.root}.jar" />
		<copy file="${bin}/${build.file.root}.jar" todir="${dist}" />
		<copy file="${bin}/${build.file.root}.jad" todir="${dist}" />
		<copy file="${bin}/${project.name}.jar" tofile="${build}/${build.prefix}${build.jar}" />
		<antcall target="create.prc" inheritAll="true" />
		<!-- Manifest changes based on MIDP/JSR's so use prefixes to -->
		<!-- identify which is which -->
		<copy file="${bin}/manifest.mf" todir="${build}/${build.prefix}manifest-${FMIDLETVERSROOT}" overwrite="true" />

		<copy todir="${dist}" >
			<fileset file="${docs}/README.txt" />
			<filterset>
				<filter token="STAGEFILE" value="${stage.file}" />
			</filterset>
		</copy>
		<copy todir="${distall}" file="${dist}/README.txt" />
		<copy todir="${distall}" >
			<fileset file="${docs}/READMEAll.txt" />
			<filterset>
				<filter token="STAGEFILE" value="${stage.file}" />
			</filterset>
		</copy>
		<copy todir="${distall}" >
			<fileset file="${docs}/READPODCASTME.txt" />
			<filterset>
				<filter token="STAGEFILE" value="${stage.file}" />
			</filterset>
		</copy>
	</target>

	<target name="create.prc" depends="prepare" if="wtk.wme.home" >
		<wtkmakeprc jarfile="${bin}/${project.name}.jar" name="${project.name}"  highres="true" creator="${prc.creater}" longname="${prc.longname}" />
		<mkdir dir="${dist}/${build.prefix}prc" />
		<move file="${bin}/${project.name}.prc" todir="${dist}/${build.prefix}prc" />
	</target>

	<target name="exec.create.rim.files" depends="prepare" if="rim.home" >
		<copy file="${dist}/${build.file.root}.jad" tofile="${dist}/${build.file.root}_cod.jad" />
		<exec executable="${rim.home}\\bin\\rapc" >
			<arg value="import=&quot;${rim.home}\\lib\\net_rim_api.jar&quot;" />
			<arg value="codename=${project.name}" />
			<arg value="-midlet" />
			<arg value="jad=${dist}/${build.file.root}_cod.jad" />
			<arg value="${dist}/${build.file.root}.jar" />
		</exec>
		<move file="${project.name}.cso" tofile="${dist}/${build.prefix}${project.name}_${FMIDLETVERSROOT}.cso" />
		<move file="${project.name}.cod" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cod" />
		<move file="${project.name}.debug" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.debug" />
	</target>

	<target name="jar.create.rim.files" depends="prepare" if="jde.home" >
	    <echo message="basedir=${basedir}" />
	    <echo message="jde.home=${jde.home}" />
		<copy file="${dist}/${build.file.root}.jad" tofile="${dist}/${build.file.root}_cod.jad" />
		<java classpathref="jde.classpath" classname="net.rim.tools.compiler.Compiler" >
			<arg value="import=${jde.home}/lib/net_rim_api.jar" />
			<arg value="codename=${project.name}" />
			<arg value="-midlet" />
			<arg value="jad=${basedir}/${dist}/${build.file.root}_cod.jad" />
			<arg value="${basedir}/${dist}/${build.file.root}.jar" />
		</java>
		<move file="../${project.name}.cso" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cso" />
		<move file="../${project.name}.cod" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cod" />
		<move file="../${project.name}.debug" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.debug" />
	</target>

	<target name="svn.op.dist" unless="skip.svn.op" >
		<delete dir="${op.dir}" />
		<mkdir dir="${op.dir}" />

		<if>
			<equals arg1="${need.svn.preprocessed}" arg2="true" />
			<then>
			<echo message="${svn.pgm} ${svn.op} ${svn.url} ${svn.src}" />
			<exec executable="${svn.pgm}" dir="${op.dir}" >
				<arg value="${svn.op}" />
				<arg value="${svn.url}" />
				<arg value="${svn.src}" />
			</exec>
			</then>
		</if>

		<if>
			<equals arg1="${need.svn.preprocessed}" arg2="true" />
			<then>
			<move todir="${op.dir}/src" >
				<fileset dir="${op.dir}/${svn.src}/src" />
			</move>
			<move todir="${op.dir}/presrc" >
				<fileset dir="${op.dir}/${svn.src}/presrc" />
			</move>
			<move todir="${op.dir}/testpresrc" >
				<fileset dir="${op.dir}/${svn.src}/testpresrc" />
			</move>
			<move todir="${op.dir}/compatpresrc" >
				<fileset dir="${op.dir}/${svn.src}/compatpresrc" />
			</move>
			<move todir="${op.dir}/testdata" >
				<fileset dir="${op.dir}/${svn.src}/testdata" />
			</move>
			<move todir="${op.dir}/jadsrc" >
				<fileset dir="${op.dir}/${svn.src}/jadsrc" />
			</move>
			<mkdir dir="${op.dir}/docs" />
			<move todir="${op.dir}/docs" >
				<fileset file="${op.dir}/${svn.src}/docs/README.txt" />
			</move>
			<move todir="${op.dir}/manifestsrc" >
				<fileset dir="${op.dir}/${svn.src}/manifestsrc" />
			</move>
			<move todir="${op.dir}/zipedsrc" >
				<fileset dir="${op.dir}/${svn.src}/zipedsrc" />
			</move>
			<move todir="${op.dir}/wtkbuild" >
				<fileset dir="${op.dir}/${svn.src}/wtkbuild" />
			</move>
			<copy todir="${dist}" file="${op.dir}/${svn.src}/RSSReader.alx" />
			<copy todir="${dist}" file="${op.dir}/${svn.src}/gpl.txt" />
			<move todir="${op.dir}" >
				<fileset file="${op.dir}/${svn.src}/release_notes.txt" />
				<fileset file="${op.dir}/${svn.src}/gpl.txt" />
				<fileset file="${op.dir}/${svn.src}/RSSReader.alx" />
				<fileset file="${op.dir}/${svn.src}/build.xml" />
			</move>
			<move todir="${op.dir}/nbproject" >
				<fileset dir="${op.dir}/${svn.src}/nbproject" />
			</move>
			<delete dir="${op.dir}/nbproject/private" />
			<move todir="${op.dir}/nbproject/private" >
				<fileset dir="${op.dir}/${svn.src}/nbproject-private" />
			</move>
			<delete dir="${op.dir}/${svn.src}" />
			</then>
		</if>
		<!--
		<svn javahl="false" >
			<export srcUrl="${svn.url}" srcPath="${svn.src}" destPath="${op.dir}" />
		</svn>
		-->
	</target>

	<!-- Distribute expoted source to ${preprocessed} -->
	<target name="dist.preprocessed" if="need.dist.preprocessed" >
		<delete dir="${preprocessed}" />
		<mkdir dir="${preprocessed}" />
		<copy todir="${preprocessed}/src" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="dist.svn" if="need.dist.svn" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${svnexport}" />
		</antcall>
	</target>

	<target name="dist.svn.dirs" depends="prepare" if="need.dist.svn.dirs" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${main}" />
		</antcall>
	</target>

	<target name="google.upload.append" depends="prepare" if="upload.to.google">
		<property name="jsr" value="" />
		<property name="google.labels" value="" />
		<echo message="cd */RSS*/dist&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${build.file.root}.cod --summary=&quot;stable Blackberry MIDP ${wtk.midp.version} ${smartphone} ${jsr75} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest binary for direct phone install this is included in binary zip.  See documentation for which program to use.&quot; ${google.labels}&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${build.file.root}.jar --summary=&quot;stable (not Blackberry) MIDP ${wtk.midp.version} ${smartphone} ${jsr75} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest binary for direct phone install this is included in binary zip.  See documentation for which program to use.&quot; ${google.labels}&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="cd ../../..&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
	</target>

	<!-- Distribute the version (e.g. MIDP-1.0, MIDP-2.0, etc) to -->
	<!-- it's target/build and target/dist target/main -->
		 
	<target name="dist.version" depends="prepare" >
		<property name="no.test" value="true" />
		<mkdir dir="${distgooglecode}" />
		<!-- delete TODO
		<delete dir="${build.vers}" />
		<mkdir dir="${build.vers}" />
		-->
		<antcall target="clean.compile" />
		<antcall target="compile" />
		<antcall target="dist.preprocessed" />

		<delete dir="${compiled}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<copy todir="${compiled}" >
				<fileset dir="${classes}" />
			</copy>
			</then>
		</if>
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<antcall target="build" inheritAll="true" >
				<param name="build.jar" value="before-obfuscation.jar" />
			</antcall>
			</then>
		</if>
		<delete dir="${preverified}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<mkdir dir="${preverified}" />
			<unjar src="${build}/${build.prefix}before-obfuscation.jar" dest="${preverified}" />
			</then>
		</if>
		<antcall target="build" >
			<param name="build.jar" value="obfuscated.jar" />
		</antcall>
		<antcall target="google.upload.append" inheritAll="true" />
		<antcall target="exec.create.rim.files" inheritAll="true" />
		<antcall target="jar.create.rim.files" inheritAll="true" />
		<delete dir="${obfuscated}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<mkdir dir="${obfuscated}" />
			<unjar src="${build}/${build.prefix}obfuscated.jar" dest="${obfuscated}" />
			<delete dir="${obfuscated}/MANIFEST.MF" />
			</then>
		</if>
		<delete file="${project.name}.jar" />
		<delete file="../${project.name}.jar" />
	</target>

	<!-- Compile using WTK with MIDP-1.0 and test -->
	<target name="compile.1.0">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and test -->
	<target name="compile.2.0">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Future as CLDC-1.1 features not used -->
	<!-- Compile using WTK with MIDP-2.0 CLDC-1.1 and test -->
	<target name="compile.2.0.cldc.1.1">
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.cldc.1.1.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Run using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="run.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="build" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="run" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, JSR-75, previous code and test -->
	<target name="compile.2.0.jsr75.test" >
		<antcall target="display.props" />
		<antcall target="compile" inheritAll="true" >
			<param name="src" value="${src}" />
			<param name="unproc.src" value="${unproc.src}" />
			<param name="presrc" value="${presrc}" />
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, Itunes, JSR-75 and test -->
	<target name="compile.2.0.itunes.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, Itunes, JSR-75 and test -->
	<target name="compile.2.0.cldc.1.1.itunes.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.itunes.jsr75.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 1.0 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.1.0" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 as a release (no test) -->
	<!-- This puts the code into src directory. -->
	<!-- There is no novice preprocess given that novice has the same -->
	<!-- compile options as MIDP-2.0. -->
	<target name="dist.preprocess.2.0" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr75" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0, and Itunes as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.itunes" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.itunes.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.itunes.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0, Itunes, and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.itunes.jsr75" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future preprocess for MIDP 2.0 and JSR-238 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr238" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- test preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="test.preprocess.2.0.itunes.jsr75" >
		<antcall target="preprocess" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="dist.compile.1.0" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 as a release (no test) -->
	<target name="dist.compile.2.0" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and JSR-75 for release -->
	<target name="dist.compile.2.0.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and Itunes and JSR-75 for release -->
	<target name="dist.compile.2.0.itunes.jsr75" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future.  No code for JSR-238 now. -->
	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="compile.2.0.jsr238" >
		<antcall target="compile" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- These are do create release versions for MIDP-1.0, MIDP-2.0, -->
	<!-- MIDP-2.0 itunes, MIDP-2.0 and JSR-75, and MIDP-2.0 itunes and -->
	<!--JSR-75 -->
	<target name="dist.midp.1.0" unless="no.1.0" >
		<antcall target="dist.version" inheritAll="yes" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Featured,Type-Executable,OpSys-All" />
			<param name="make.build.files" value="true" />
			<param name="dist.vers" value="${dist.midp10}" />
			<param name="build.vers" value="${build.midp10}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0" unless="no.2.0" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20}" />
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Featured,Type-Executable,OpSys-All" />
			<param name="make.build.files" value="false" />
			<param name="build.vers" value="${build.midp20}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Do MIDP 2.0 with novice version. -->
	<target name="dist.midp.2.0.novice" unless="no.2.0.novice" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.novice.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.novice}" />
			<param name="make.build.files" value="true" />
			<param name="build.vers" value="${build.midp20.novice}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1" unless="no.2.0.cldc.1.1" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11}" />
			<param name="make.build.files" value="true" />
			<param name="build.vers" value="${build.midp20.cldc11}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="upload.to.google" value="true" />
			<param name="jsr" value="JSR-75" />
			<param name="make.build.files" value="false" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr75" unless="no.2.0.cldc.1.1.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.jsr75}" />
			<param name="make.build.files" value="true" />
			<param name="build.vers" value="${build.midp20.cldc11.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.itunes" unless="no.2.0.itunes" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.itunes.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.itunes}" />
			<param name="make.build.files" value="false" />
			<param name="upload.to.google" value="true" />
			<param name="smartphone" value="Smartphone" />
			<param name="build.vers" value="${build.midp20.itunes}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.itunes.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.itunes.jsr75}" />
			<param name="upload.to.google" value="true" />
			<param name="make.build.files" value="false" />
			<param name="jsr" value="JSR-75" />
			<param name="smartphone" value="Smartphone" />
			<param name="build.vers" value="${build.midp20.itunes.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.itunes.jsr75" unless="no.2.0.cldc.1.1.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0cldc1.1.itunes.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.cldc11.itunes.jsr75}" />
			<param name="make.build.files" value="false" />
			<param name="build.vers" value="${build.midp20.cldc11.itunes.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr238" unless="no.2.0.jsr238" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr238.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="make.build.files" value="false" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 1.0 version. -->
	<target name="package.midp.1.0"  >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk1.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp10}" />
			<param name="build.vers" value="${build.midp10}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 version. -->
	<target name="package.midp.2.0"  >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20}" />
			<param name="build.vers" value="${build.midp20}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 with JSR-75 version. -->
	<target name="package.midp.2.0.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.jsr75}" />
			<param name="build.vers" value="${build.midp20.jsr75}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 with itunes version with JSR-75 version. -->
	<target name="package.midp.2.0.itunes.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.itunes.jsr75}" />
			<param name="build.vers" value="${build.midp20.itunes.jsr75}" />
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="run.midp.2.0.itunes.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="run" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="dist.vers" value="${dist.midp20.itunes.jsr75}" />
			<param name="build.vers" value="${build.midp20.itunes.jsr75}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.dev.status" depends="release.buildno,release.prepare,prepare.stage" >
		<antcall target="clean" />
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${distgooglecode}" />
		<mkdir dir="${distall}" />
		<delete dir="${build}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	    <echo message="main build.number=${build.number}" />
		<antcall target="dist.svn.dirs" />
		<property name="dist.project.prefix" value="${project.file.prefix}-v${FMIDLETVERSROOT}${dist.stage.file}" />
		<property name="dist.project.expert.zip" value="${dist.project.prefix}-expert-bin.zip" />
		<property name="dist.project.smartphone.zip" value="${dist.project.prefix}-smartphone-bin.zip" />
		<property name="dist.project.bin.zip" value="${dist.project.prefix}-bin.zip" />
		<property name="dist.project.src.zip" value="${dist.project.prefix}-src.zip" />
		<echo message="#!/bin/bash&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.bin.zip} --summary=&quot;stable Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest binaries for 96% of phones (also included in expert binaries)&quot; --labels=Featured,Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.smartphone.zip} --summary=&quot;stable Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest binaries for smartphones only (this uses up too much memory for non-smartphones.  also included in expert binaries)&quot; --labels=Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.expert.zip} --summary=&quot;Expert (use ${project.file.prefix}-v${MIDLETVERSROOT}-bin.zip most people don't need expert version and expert is confusing) stable Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest binaries for 4% of phones&quot; --labels=--labels=Featured,Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.src.zip} --summary=&quot;stable Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage} latest source zip.&quot; --labels=Type-Source&#10;" file="${distgooglecode}/googlupload.sh" append="true" />
		<antcall target="dist.midp.1.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.itunes" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.itunes.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.itunes.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.preprocess.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<chmod file="${distgooglecode}/googlupload.sh" perm="744" />
		<property name="distdir" value="${distjardir}/RSSReader-${FMIDLETVERSROOT}${dist.stage.file}" />
		<mkdir dir="${distdir}" />
		<copy todir="${distdir}/dist" overwrite="true" >
			<fileset dir="${dist}" excludes="**/RE*.txt" />
		</copy>
		<copy file="${distall}/READMEAll.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<zip destfile="${distproject}/${dist.project.expert.zip}" basedir="${distjardir}" />
		<delete includeemptydirs="true">
			<fileset dir="${distdir}" excludes="**/**podcast**" />
			<fileset dir="${distdir}" includes="**/**midp10**,**/**cldc**" />
		</delete>
		<copy file="${distall}/READPODCASTME.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<zip destfile="${distproject}/${dist.project.smartphone.zip}" basedir="${distjardir}" />
		<copy file="${distall}/README.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<delete includeemptydirs="true">
			<fileset dir="${distdir}" includes="**/**cldc**,**podcast**" />
		</delete>
		<zip destfile="${distproject}/${dist.project.bin.zip}" basedir="${distjardir}" />
		<delete dir="${distdir}/dist" />
		<copy todir="${distdir}" overwrite="true" >
			<fileset dir="${main}" />
		</copy>
		<zip destfile="${distproject}/${dist.project.src.zip}" basedir="${distjardir}" />
		<copy todir="${distdir}/dist" overwrite="true" >
			<fileset dir="${dist}" excludes="**/RE*.txt" />
		</copy>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="./.rms" />
			<fileset dir="./" includes="**/*.tmp" />
			<fileset dir="../" includes="RSSReader-**.debug" />
		</delete>
	</target>

	<target name="dist" >
		<antcall target="dist.dev.status" inheritAll="true" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.test" >
		<antcall target="dist" inheritAll="true" >
			<param name="no.2.0.novice" value="true" />
			<param name="no.2.0.cldc.1.1.itunes.jsr75" value="true" />
			<param name="no.2.0.jsr238" value="true" />
		</antcall>
	</target>

	<target name="dist.itunes.test" >
		<antcall target="dist" inheritAll="true" >
			<param name="no.2.0.novice" value="true" />
			<param name="no.1.0" value="true" />
			<param name="no.2.0" value="true" />
			<param name="no.2.0.cldc.1.1" value="true" />
			<param name="no.2.0.jsr75" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75" value="true" />
			<param name="no.2.0.jsr238" value="true" />
		</antcall>
	</target>

	<target name="copy.device.bin" depends="prepare" if="midlet.home" >
		<mkdir dir="${midlet.home}/${bin}" />
		<copy file="${bin}/${project.name}.jar" tofile="${midlet.home}/${bin}/${project.name}.jar" overwrite="true" />
		<copy file="${bin}/${project.name}.jad" tofile="${midlet.home}/${bin}/${project.name}.jad" />
	</target>

	<!-- Start the MIDlet suite -->
	<target name="run" depends="prepare" >
		<wtkrun jadfile="${dist}/${build.file.root}.jad" device="DefaultColorPhone" wait="false" />

	</target>

	<target name="run.dist.version"  depends="prepare" >
		<echo message="emulator.jar=${emulator.jar}" />
		<property name="run.jar" value="${dist}/${build.file.root}.jar" />
		<echo message="jar=${run.jar}" />
		<java classname="${emulator.class}" fork="true" >
			<classpath>
				<pathelement location="${emulator.jar}" />
				<pathelement location="${run.jar}" />
			</classpath>
			<arg value="${midlet.class}" />
		</java>
	</target>

	<target name="run.dist.midp.2.0.itunes.jsr75" unless="run.no.2.0.itunes.jsr75" >
		<antcall target="run.dist.version" inheritAll="true" >
			<param name="wtk.properties" value="wtk2.0.itunes.jsr75.properties${wtk.template}" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

</project>
