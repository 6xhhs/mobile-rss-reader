<?xml version="1.0"?>

<project name="RSSReader" default="build" basedir="." >

	<!-- IB 2010-03-08 1.11.4RC1 Use wtkjad to create non-Blackberry JAD/manifest file. -->
	<!-- IB 2010-03-08 1.11.4RC1 Use latest antenna 1.2.1 beta -->
	<!-- IB 2010-03-08 1.11.4RC1 Use latest proguard 4.5 beta3 -->
	<!-- IB 2010-03-08 1.11.4RC1 Use proguard task.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use observer pattern for feed parsing to prevent hangs from spotty networks and bad URLs. -->
	<!-- IB 2010-03-08 1.11.4RC1 Use googlecode_upload.pl to upload to Google Project Hosting. -->
	<!-- IB 2010-03-08 1.11.4RC1 Create smartphone version with just MIDP 2.0.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Create archive files.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Don't create empty version directory.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use zip for src as the file paths are too long for non-GNU tar.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use - in cod files before version instead of _.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use project.file.prefix for project archives.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Use STAGE in description.  -->
	<!-- IB 2010-03-08 1.11.4RC1 Make test distribution target with only MIDP 2.0 and MIDP 2.0 with JSR-75.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Remove unneeded directories.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Create non JSR-75 smartphone/podcast version.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Create itunes test target.  -->
	<!-- IB 2010-03-09 1.11.4RC2 Fix smartphone zip.  -->
	<!-- IB 2010-03-09 1.11.5RC1 Add labels to all artifacts.  -->
	<!-- IB 2010-03-09 1.11.5RC1 Spell Google as Google not googl.  -->
	<!-- IB 2010-03-09 1.11.5RC1 Partial fix for using findbugs.  -->
	<!-- IB 2010-03-09 1.11.5RC1 Create obfuscate map.  -->
	<!-- IB 2010-03-09 1.11.5RC1 Use CLDC 1.1 for smartphone versions. -->
    <!-- IB 2010-05-25 1.11.5RC2 Use properties files based on midp, cldc, and JSRs used individually instead of combining them. -->
    <!-- IB 2010-05-25 1.11.5RC2 Use cldc10 for naming in CLDC 1.0 versions. -->
    <!-- IB 2010-05-26 1.11.5RC2 Use common build.vers and dist.vers properties. -->
    <!-- IB 2010-05-26 1.11.5RC2 Handle stage releases better. -->
    <!-- IB 2010-05-26 1.11.5RC2 Remove *.debug file from regular and smartphone bin files. -->
    <!-- IB 2010-05-28 1.11.5RC2 Changes for findbugs for future.  -->
    <!-- IB 2010-05-28 1.11.5RC2 Change order of uploads for zips so that regular bin zip is last so that it will be at the top of the list.  -->
    <!-- IB 2010-05-28 1.11.5RC2 Make input file for sftp for sites that allow upload with sftp.  -->
    <!-- IB 2010-05-30 1.11.5RC2 Improve dist.test.  -->
    <!-- IB 2010-05-30 1.11.5RC2 Add signed targets for MIDP 1.0, MIDP 2.0, MIDP 2.0 and JSR 75. -->
    <!-- IB 2010-06-01 1.11.5RC2 Taylor images in the jar for the right releases.  File images are only applicable to JSR-75.  -->
    <!-- IB 2010-06-01 1.11.5RC2 New target compile for distribution for CLDC 1.1, itunes, and JSR-75.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Use stage.stable.text to specify if this stage is stable or unstable.  -->
    <!-- IB 2010-06-29 1.11.5RC2 More logging.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Put signed into file names for signed targets.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Delete and then create the zip file to avoid problems from previous creation.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Allow parameters mjadfile and mjarfile to specify the jad/jar names for more flexibility.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Allow Thawte signed jad/jar files.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Don't create RIM version if Thawte signed.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Use stage.featured to allow featured label to be changed.  -->
    <!-- IB 2010-06-29 1.11.5RC2 Use wtkpreprocess and wtkobfuscate since proguard task does not work directly.  -->
    <!-- IB 2010-07-02 1.11.5RC2 Don't have MIDP 1.0 signed or unsigned or MIDP 2.0 signed be featured. -->
    <!-- IB 2010-07-02 1.11.5RC2 Only use signed versions for smartphone version.  -->
    <!-- IB 2010-07-03 1.11.5Dev3 Fix Thawte signing so that the signed jar gets distributed and that the jad gets signed with correct byte size.  -->
    <!-- IB 2010-07-03 1.11.5Dev4 Fix Thawte signing so that jarsigner and JadTool are used instead of wtksign.  This puts the certificates into the jar file and adds 3 certificates to the jad file instead of 1.  -->
    <!-- IB 2010-07-03 1.11.5Dev4 Put release_notes-(current version w/underscores).txt into sftp download directory. -->
    <!-- IB 2010-07-05 1.11.5Dev6 Use original.author to put in Tommi's name. -->
    <!-- IB 2010-07-05 1.11.5Dev6 Don't make the zip files if we are skipping svn export. -->
    <!-- IB 2010-07-05 1.11.5Dev6 Use Yinlight, LLC for vendor and www.yinlight.net for info url, only if signed.  Otherwise, the app is treated as a different app.  -->
    <!-- IB 2010-07-05 1.11.5Dev6 Fix creating signed JAD so that it copies the jad with overwrite.  -->
    <!-- IB 2010-07-05 1.11.5Dev6 Have dist.no.signed target to not sign any files.  This helps if the certificate is pending.  -->
    <!-- IB 2010-07-05 1.11.5Dev7 Use new ant feature that allows you to use an expression that evaluates to true in the target attribute 'if'.  -->
    <!-- IB 2010-07-05 1.11.5Dev7 Put changelog-(current version w/underscores).txt into sftp download directory.  -->
    <!-- IB 2010-07-05 1.11.5Dev7 Put gpl.txt into sftp download directory.  -->
    <!-- IB 2010-07-05 1.11.5Dev7 Include version number in gpl.txt as gpl-2.txt.  -->
    <!-- IB 2010-07-05 1.11.5Dev7 Include version 2.1 of the LGPL as lgpl-2_1.txt and distribute where gpl-2.txt is.  -->
    <!-- IB 2010-07-09 1.11.5Dev7 Use no.individual.file to turn off copying jad/jar/cod files to google distribution.  This is done for dev releases.  -->
    <!-- IB 2010-07-10 1.11.5Dev8 Remove unused wtk.properties.  -->
    <!-- IB 2010-07-10 1.11.5Dev8 Don't use manifestsrc as the manifest is generated by wtkjad.  -->
    <!-- IB 2010-07-10 1.11.5Dev8 Don't use jadsrc as the jad is generated by wtkjad.  -->
    <!-- IB 2010-07-10 1.11.5Dev8 Use only JSR-75 versions for smartphones.  -->
    <!-- IB 2010-07-10 1.11.5Dev8 Remove unused build directories.  -->
    <!-- IB 2010-07-29 1.11.5Dev8 Add stable/unstable to expert binary.  -->
    <!-- IB 2010-07-30 1.11.5Dev8 Use release.name for build file name for projects with multiple release files.  -->
    <!-- IB 2010-10-06 1.11.5Dev9 Use directory of path containing preverify for rapc, not the path to preverify. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Use special alx directory to zip alx and cod files. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Log jde.home and rim.home in display.props. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Use ant blackberry build tools to optionally create blackberry jar, jad, cso, cod, and alx. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Create zip file for alx directory. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Fix MIDlet-Jar-URL to correct value. -->
    <!-- IB 2010-10-06 1.11.5Dev9 Change RIM file creation directly using jar to set jde.home. -->
    <!-- IB 2010-10-11 1.11.5Dev9 Use jde.home.path for path to jde.home so that we can set jde.home dynamically.  -->
    <!-- IB 2010-10-11 1.11.5Dev9 Have option to use jar.jde.home for using Blackberry jar directly. -->
    <!-- IB 2010-10-11 1.11.5Dev9 Use bb.jde.home for Blackberry ant tasks path to jde.home.  -->
    <!-- IB 2010-10-11 1.11.5Dev9 Use mweb.jarfile to use correct jar path in jad file.  -->
    <!-- IB 2010-10-11 1.11.5Dev9 Use jsjar.fn for jar file name including suffix.  -->
    <!-- IB 2010-10-12 1.11.5Dev9 Remove extra dash dash labels=. from google upload. -->

	<property environment="env" />
	<property name="sony.location" value="C:/SONYER~1/JavaME_SDK_CLDC/PC_Emulation/WTK2/" />

	<property name="device.props" value="" />
	<property name="build.template" value="" />
	<property name="beta.vers" value="" />
	<echo message="build.template=${build.template}" />
	<echo message="release.template=${release.template}" />
	<echo message="test.template=${test.template}" />
	<echo message="optional.template=${optional.template}" />
	<echo message="DLOGDEF=${DLOGDEF}" />
	<echo message="presrc=" />
	<property name="DEBUG" value="DEBUG" />
	<property name="target" value="../target" />
	<property name="tmpres" value="${target}/tmpres" />
	<property name="webtestdata" value="${target}/webtestdata" />
	<property name="filetestdata" value="${target}/filetestdata" />
	<property name="analyze" value="${target}/analyze" />
	<property name="dist.name" value="dist" />
	<property name="dist" value="${target}/${dist.name}" />
	<property name="distgooglecode" value="${target}/distgooglecode" />
	<property name="distsourceforge" value="${target}/distsourceforge" />
	<property name="ftpdist.name" value="ftpdist" />
	<property name="ftpdist.dir" value="${target}/${ftpdist.name}" />
	<property name="distsourceforge" value="${target}/distsourceforge" />
	<property name="sourceforge.ftp.in.file" value="${distsourceforge}/sfftpin" />
	<property name="distyinlight" value="${target}/distyinlight" />
	<property name="yinlight.ftp.in.file" value="${distyinlight}/ylftpin" />
	<property name="distproject-name" value="distproject" />
	<property name="distproject" value="${target}/${distproject-name}" />
	<property name="distjardir" value="${distproject}/distjardir" />
	<property name="distall" value="${target}/distall" />
	<property name="main" value="${target}/main" />
	<property name="build" value="${target}/build" />
	<property name="classes" value="${target}/classes" />
	<property name="tmppreprocess" value="${target}/tmppreprocess" />
	<property name="ext.drive" value="${env.EXT_DRIVE}" />
	<property file="${basedir}/wtk-build${device.props}.properties${build.template}" />
	<echo message="java.home=${java.home}" />
	<echo message="JAVA_HOME=${env.JAVA_HOME}" />
	<property name="DFEATUREFORMDEF" value="DFEATUREFORMDEF" />
	<!-- DCOMPATDEF is used to test compatibility store/restore of date -->
	<property name="DCOMPATDEF" value="DNOCOMPAT" />
	<echo message="unproc.src=${unproc.src}" />
	<fail message="Must set comp.src to src directory to put the source to compile." unless="comp.src" />

	<!-- Define the tasks. -->

	<!-- clean up the project -->
	<target name="clean" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75">
		<echo message="deleting ${target}" />
		<delete dir="${target}" />
		<antcall target="clean.version" inheritAll="true" />
	</target>

	<!-- clean up the compile -->
	<target name="clean.compile">
		<delete dir="${classes}" />
	</target>

	<!-- TODO -->
	<target name="clean.version">
		<delete dir="${classes}" />
	</target>

	<target name="test.prepare" unless="no.test" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<property name="test.template" value="" />
		<property file="${basedir}/test.properties${test.template}" />
		<antcall target="test.buildno" />
		<property file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="test.buildno" unless="test.buildinfo" >
	    <echo message="Using test properties" />
	    <echo message="no.release=${no.release}" />
		<buildnumber file="${basedir}/test_buildinfo.properties${test.template}" />
	    <echo message="Release buildinfo update." />
		<property name="test.buildno" value="true" />
	</target>

	<target name="release.prepare" unless="no.release" >
	    <echo message="Using release properties" />
		<property name="release.template" value="" />
		<property file="${basedir}/release.properties${release.template}" />
	    <echo message="RELEASE=${RELEASE}" />
	    <echo message="build.number=${build.number}" />
		<antcall target="release.buildno" />
		<property file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="build.number=${build.number}" />
	</target>

	<target name="release.buildno" unless="release.buildno" >
		<buildnumber file="${basedir}/release_buildinfo.properties${release.template}" />
	    <echo message="Release buildinfo update." />
		<property name="release.buildno" value="true" />
	</target>

	<target name="staging.prepare" unless="no.staging" >
	    <echo message="Using release staging properties" />
		<property file="${basedir}/staging.properties" />
	</target>

	<target name="prepare.midp1.0" >
		<property file="${basedir}/wtkmidp1.0.properties${build.template}" />
	</target>

	<target name="prepare.midp2.0" >
		<property file="${basedir}/wtkmidp2.0.properties${build.template}" />
	</target>

	<target name="prepare.cldc1.0" >
		<property file="${basedir}/wtkcldc1.0.properties${build.template}" />
	</target>

	<target name="prepare.cldc1.1" >
		<property file="${basedir}/wtkcldc1.1.properties${build.template}" />
	</target>

	<target name="prepare.jsr75" >
		<property file="${basedir}/wtkjsr75.properties${build.template}" />
	</target>

	<target name="prepare.itunes" >
		<property file="${basedir}/wtkitunes.properties${build.template}" />
	</target>

	<target name="prepare.signed" >
		<property file="${basedir}/wtksigned.properties${build.template}" />
		<property name="vendor" value="${yinlight.vendor}" />
		<property name="project.info.url" value="${yinlight.project.info.url}" />
	</target>

	<target name="prepare.novice" >
		<property file="${basedir}/wtknovice.properties${build.template}" />
	</target>

	<target name="prepare.jsr238" >
		<property file="${basedir}/wtkjsr238.properties${build.template}" />
	</target>

	<target name="prepare.thawte" if="thawte.sign" unless="godaddy.sign" >
		<property name="tsalias" value="${env.THAWTE_ALIAS}" />
		<property name="tsstorepass" value="${env.THAWTE_KEYSTORE_PASS}" />
		<property name="tskeystore" value="${env.THAWTE_KEYSTORE_LOCATION}/${env.THAWTE_KEYSTORE_NAME}" />
		<property name="tskeypass" value="${env.THAWTE_KEYSTORE_PASS}" />
	</target>

	<target name="prepare.godaddy" if="godaddy.sign" >
		<property name="tsalias" value="${env.GODADDY_ALIAS}" />
		<property name="tsstorepass" value="${env.GODADDY_KEYSTORE_PASS}" />
		<property name="tskeystore" value="${env.GODADDY_KEYSTORE_LOCATION}/${env.GODADDY_KEYSTORE_NAME}" />
		<property name="tskeypass" value="${env.GODADDY_KEYSTORE_PASS}" />
	</target>

	<!-- Prepare the distribution stage (e.g. beta1) -->
	<target name="prepare.stage" if="stage" >
	    <echo message="Using distribution stage=${stage}" />
		<property name="stage.file" value="${stage}_" />
		<echo message="stage.file=${stage.file}" />
		<property name="dist.stage.file" value="_${stage}" />
		<echo message="dist.stage.file=${dist.stage.file}" />
		<echo message="ustage=${ustage}" />
		<property name="ustage.txt" value="${ustage} " />
		<echo message="ustage.txt=${ustage.txt}" />
		<property name="stage.featured" value="Featured," />
		<property name="ftp.ustage.txt" value="${ustage}\ " />
		<echo message="ftp.ustage.txt=${ftp.ustage.txt}" />
		<property name="no.individual.file" value="false" />
	    <echo message="no.individual.file=${no.individual.file}" />
	</target>

	<!-- Prepare to init stage properties if not set already.  -->
	<target name="prepare.no.stage" unless="stage" >
		<property name="stage" value="" />
	    <echo message="Using distribution no stage=${stage}" />
		<property name="stage.file" value="" />
		<echo message="stage.file=${stage.file}" />
		<property name="dist.stage.file" value="" />
		<echo message="dist.stage.file=${dist.stage.file}" />
		<property name="ustage" value="" />
		<echo message="ustage=${ustage}" />
		<property name="ustage.txt" value="" />
		<echo message="ustage.txt=${ustage.txt}" />
		<property name="stage.featured" value="Featured," />
		<property name="ftp.ustage.txt" value="" />
		<echo message="ftp.ustage.txt=${ftp.ustage.txt}" />
		<property name="no.individual.file" value="false" />
	    <echo message="no.individual.file=${no.individual.file}" />
	</target>

	<!-- prepare the target folder -->
	<target name="prepare" depends="test.prepare,release.prepare,prepare.stage,prepare.no.stage" >
		<!-- Define the Wireless Toolkit home directory. Needed by the tasks. -->
		<!-- Define some additional properties for this project. Not required. -->
		<property name="optional.template" value="" />
		<property file="${basedir}/optional.properties${optional.template}" />
		<property name="thawte.sign" value="true" />
		<property name="propdir" value="${basedir}" />
		<property name="res.includes" value="**/unread.png,**/rss.png" />
		<property name="MIDLETVERS" value="${MIDLETVERSROOT}" />
		<property name="PERMISSIONS.jsr75" value="" />
		<property name="PERMISSIONS.jsr238" value="" />
		<property name="PERMISSIONS" value="javax.microedition.io.HttpConnection,javax.microedition.io.HttpsConnection${PERMISSIONS.jsr75}${PERMISSIONS.jsr238}" />
		<property name="DMEMSIZEDEF" value="DREGULARMEM" />
		<property name="DITUNESDEF" value="DNOITUNES" />
		<property name="DSIGNEDDEF" value="DNOSIGNED" />
		<property name="DJSR75" value="DNOJSR75" />
		<property name="DJSR238" value="DNOJSR238" />
		<property name="nojsr75.res.excludes" value="**/file_icon.png,**/folder.png,**/up_dir_icon.png,**/folder_icon.png" />
		<property name="wtk.optionalpda.enabled" value="false" />
		<property name="wtk.bluetooth.enabled" value="false" />
		<property name="wtk.wma.enabled" value="false" />
		<property name="wtk.mmapi.enabled" value="false" />
		<property name="wtk.miapi.enabled" value="false" />
		<property name="wtk.wma2.enabled" value="false" />
		<property name="file.nbr.midp1.0" value="" />
		<property name="file.nbr.midp2.0" value="" />
		<property name="file.nbr.midp" value="${file.nbr.midp1.0}${file.nbr.midp2.0}" />
		<property name="file.nbr.cldc1.0" value="" />
		<property name="file.nbr.cldc1.1" value="" />
		<property name="file.nbr.cldc" value="${file.nbr.cldc1.0}${file.nbr.cldc1.1}" />
		<property name="file.prefix.midp1.0" value="" />
		<property name="file.prefix.midp2.0" value="" />
		<property name="file.prefix.cldc1.0" value="" />
		<property name="file.prefix.cldc1.1" value="" />
		<property name="file.prefix.novice" value="" />
		<property name="file.prefix.itunes" value="" />
		<property name="file.prefix.signed" value="" />
		<property name="file.prefix.jsr75" value="" />
		<property name="file.prefix.jsr238" value="" />
		<property name="file.prefix.large" value="" />
		<property name="file.prefix" value="${file.prefix.midp1.0}${file.prefix.midp2.0}${file.prefix.cldc1.0}${file.prefix.cldc1.1}${file.prefix.novice}${file.prefix.itunes}${file.prefix.signed}${file.prefix.jsr75}${file.prefix.jsr238}" />
		<property name="bin" value="${target}/bin${file.prefix}" />
		<property name="rim.bin" value="${target}/bin${file.prefix}_rim" />
		<property name="rim.bin.alx" value="${target}/bin${file.prefix}_rim_alx" />
		<property name="build.vers" value="${target}/build_${file.prefix}" />
		<property name="dist.vers" value="${target}/dist_${file.prefix}" />
		<property name="SUFFIXVERS.midp1.0" value="" />
		<property name="SUFFIXVERS.midp2.0" value="" />
		<property name="SUFFIXVERS.cldc1.0" value="" />
		<property name="SUFFIXVERS.cldc1.1" value="" />
		<property name="SUFFIXVERS.novice" value="" />
		<property name="SUFFIXVERS.itunes" value="" />
		<property name="SUFFIXVERS.signed" value="" />
		<property name="SUFFIXVERS.jsr75" value="" />
		<property name="SUFFIXVERS.jsr82" value="" />
		<property name="SUFFIXVERS.jsr120" value="" />
		<property name="SUFFIXVERS.jsr135" value="" />
		<property name="SUFFIXVERS.jsr184" value="" />
		<property name="SUFFIXVERS.jsr238" value="" />
		<property name="SUFFIXVERS.large" value="" />
		<property name="SUFFIXVERS" value="${SUFFIXVERS.midp1.0}${SUFFIXVERS.midp2.0}${SUFFIXVERS.cldc1.0}${SUFFIXVERS.cldc1.1}${SUFFIXVERS.novice}${SUFFIXVERS.itunes}${SUFFIXVERS.signed}${SUFFIXVERS.jsr75}${SUFFIXVERS.jsr82}${SUFFIXVERS.jsr120}${SUFFIXVERS.jsr135}${SUFFIXVERS.jsr184}${SUFFIXVERS.jsr238}${SUFFIXVERS.large}" />
		<property name="lib.jsr75" value="" />
		<property name="lib.jsr82" value="" />
		<property name="lib.jsr120" value="" />
		<property name="lib.jsr135" value="" />
		<property name="lib.jsr184" value="" />
		<property name="lib.jsr238" value="" />
		<property name="lib.classpath" value="${wtk.home}/lib/midpapi${file.nbr.midp}.jar:${wtk.home}/lib/cldcapi${file.nbr.cldc}.jar${lib.jsr75}${lib.jsr82}${lib.jsr120}${lib.jsr135}${lib.jsr184}${lib.jsr238}" />
		<property name="DFEATUREFORMDEF" value="DFEATUREFORMDEF" />
		<!-- DCOMPATDEF is used to test compatibility store/restore of date -->
		<property name="DCOMPATDEF" value="DNOCOMPAT" />
		<!-- Note:  this value will not be used if novice is set before -->
		<!-- we get here (e.g. in target dist.midp.2.0.novice).  For the -->
		<!-- other targets, NOVICE will be false and therefore disabled -->
		<property name="NOVICE" value="false" />
		<property name="novice.txt" value="${src}/data/novice.txt" />
		<property name="jsr75" value="" />
		<property name="smartphone" value="" />
		<property name="stage.stable.text" value="stable" />
		<property name="signed.text" value="" />
		<property name="vendor" value="${tommi.vendor}" />
		<property name="project.info.url" value="${tommi.project.info.url}" />
		<property name="build.prefix" value="${file.prefix}${stage.file}" />
		<property name="build.file.root" value="${build.prefix}${release.name}-${FMIDLETVERSROOT}" />
		<property name="buildinfo" value="${SUFFIXVERS}-${stage.file}b${build.number}" />
		<!-- changed -->
		<mkdir dir="${target}" />
		<mkdir dir="${classes}" />
		<property name="EMULATOR" value="true" />
		<property name="svnexport" value="${build}/svnexport" />
		<property name="compiled" value="${build}/${build.prefix}pcompiled" />
		<property name="preverified" value="${build}/${build.prefix}preverified" />
		<property name="preprocessed" value="${build}/${build.prefix}preprocessed" />
		<property name="obfuscated" value="${build}/${build.prefix}obfuscated" />
		<filterset id="defile.filter" >
			<filter token="DMIDPVERS" value="//#define ${DMIDPVERS}" />
			<filter token="DCLDCVERS" value="//#define ${DCLDCVERS}" />
			<filter token="DFEATUREFORMDEF" value="//#define ${DFEATUREFORMDEF}" />
			<filter token="DFEATUREFORMIMPORTDEF" value="${DFEATUREFORMIMPORTDEF}" />
			<filter token="DMEMSIZEDEF" value="//#define ${DMEMSIZEDEF}" />
			<filter token="DITUNESDEF" value="//#define ${DITUNESDEF}" />
			<filter token="DSIGNEDDEF" value="//#define ${DSIGNEDDEF}" />
			<filter token="DJSR75" value="//#define ${DJSR75}" />
			<filter token="DJSR238" value="//#define ${DJSR238}" />
			<filter token="DTESTDEF" value="//#define ${DTESTDEF}" />
			<filter token="DJMTESTDEF" value="//#define ${DJMTESTDEF}" />
			<filter token="DCOMPATDEF" value="//#define ${DCOMPATDEF}" />
			<filter token="DTESTUIDEF" value="//#define ${DTESTUIDEF}" />
			<filter token="DLOGDEF" value="//#define ${DLOGDEF}" />
			<filter token="PROGVERS" value="${buildinfo}" />
		</filterset>
		<filterset id="midlet.info" >
			<filter token="MIDPVERS" value="${wtk.midp.version}" />
			<filter token="CLDCVERS" value="${wtk.cldc.version}" />
			<filter token="MIDLETVERS" value="${MIDLETVERS}" />
			<filter token="PROGVERS" value="${buildinfo}" />
			<filter token="JMIDPVERS" value="${JMIDPVERS}" />
			<filter token="JCLDCVERS" value="${JCLDCVERS}" />
			<filter token="PERMISSIONS" value="${PERMISSIONS}" />
			<filter token="EMULATOR" value="${EMULATOR}" />
			<filter token="NOVICE" value="${NOVICE}" />
		</filterset>

	</target>

    <echo message="antenna location='${antenna.home}/${antenna.jar}'" />
	<taskdef resource="antenna.properties" >
	  <classpath>
		<pathelement location="${antenna.home}/${antenna.jar}" />
	  </classpath>
	</taskdef>

    <echo message="bb ant tools location='${bb.ant.tools.home}/${bb.ant.tools.jar}'" />
	<taskdef resource="bb-ant-defs.xml" >
	  <classpath>
		<pathelement location="${bb.ant.tools.home}/${bb.ant.tools.jar}" />
	  </classpath>
	</taskdef>

	<taskdef resource="proguard/ant/task.properties"
         classpath="${wtk.proguard.home}/lib/proguard.jar" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="${antcontrib.home}/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

	<!--
	<taskdef resource="svntask.properties" >
	  <classpath>
		<pathelement location="${svnant.home}/svnant.jar" />
		<pathelement location="${svnant.home}/svnClientAdapter.jar" />
	  </classpath>
	</taskdef>
	-->

	<!--
	<taskdef resource="com/idaremedia/svn4ant/client/antlib.xml" >
	  <classpath>
		<pathelement location="${svnant.home}/dependencies/antx/lib/AntX_tasks.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/lib/JWare_apis.jar" />
		<pathelement location="${svnant.home}/dependencies/antx/src.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/ganymed.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit-cli.jar" />
		<pathelement location="${svnant.home}/dependencies/javasvn/lib/svnkit.jar" />
	  </classpath>
	</taskdef>
	-->

	<target name="display.props" >
	    <echo message="project.name=${project.name}" />
	    <echo message="wtk.home=${wtk.home}" />
	    <echo message="jar.jde.home=${jar.jde.home}" />
	    <echo message="bb.jde.home=${bb.jde.home}" />
	    <echo message="rim.home=${rim.home}" />
	    <echo message="PWD=${env.PWD}" />
	    <echo message="lib.classpath=${lib.classpath}" />
	    <echo message="build.compiler=${build.compiler}" />
	    <echo message="src=${src}" />
	    <echo message="presrc=${presrc}" />
	    <echo message="compat.presrc=${compat.presrc}" />
	    <echo message="testui.presrc=${testui.presrc}" />
	    <echo message="build.number=${build.number}" />
	    <echo message="file.prefix=${file.prefix}" />
	    <echo message="build.prefix=${build.prefix}" />
	    <echo message="need.res=${need.res}" />
	    <echo message="keep.obfuscate=${keep.obfuscate}" />
	    <echo message="novice=${novice}" />
	    <echo message="novice.txt=${novice.txt}" />
	    <echo message="NOVICE=${NOVICE}" />
	    <echo message="DMIDPVERS=${DMIDPVERS}" />
	    <echo message="DCLDCVERS=${DCLDCVERS}" />
	    <echo message="DITUNESDEF=${DITUNESDEF}" />
	    <echo message="DSIGNEDDEF=${DSIGNEDDEF}" />
	    <echo message="DMEMSIZEDEF=${DMEMSIZEDEF}" />
	    <echo message="DFEATUREFORMDEF=${DFEATUREFORMDEF}" />
	    <echo message="DFEATUREFORMIMPORTDEF=${DFEATUREFORMIMPORTDEF}" />
	    <echo message="DJSR75=${DJSR75}" />
	    <echo message="DJSR238=${DJSR238}" />
	    <echo message="DTESTDEF=${DTESTDEF}" />
	    <echo message="DJMTESTDEF=${DJMTESTDEF}" />
	    <echo message="DTESTUIDEF=${DTESTUIDEF}" />
	    <echo message="DCOMPATDEF=${DCOMPATDEF}" />
	    <echo message="wtk.optionalpda.enabled=${wtk.optionalpda.enabled}" />
	    <echo message="DLOGDEF=${DLOGDEF}" />
	    <echo message="no.test=${no.test}" />
	    <echo message="no.staging=${no.staging}" />
	    <echo message="no.release=${no.release}" />
	    <echo message="need.test.res=${need.test.res}" />
	    <echo message="MIDLETURL_ROOT=${MIDLETURL_ROOT}" />
	    <echo message="separator=${separator}" />
	</target>

	<!-- Preprocess source using antenna preprocessor.  If preproccess -->
	<!-- is not used, this copies the src to the directory to compile -->
	<!-- comp.src. -->
	<target name="preprocess" depends="prepare" if="presrc" >
		<antcall target="display.props" />
		<!-- Delete directory to compile so that we start fresh for cases -->
		<!-- when we delete a file. -->
		<delete dir="${comp.src}" />
		<mkdir dir="${comp.src}" />
		<!-- Copy unpreprocessed source to compiled src dir -->
		<antcall target="copy.unproc.comp" />
		<delete dir="${tmppreprocess}" />
		<!-- Check with defines in jdk.home rapc. -->
		<property name="preprocess.defines" value="DEBUG=WARN,${DMIDPVERS},${DCLDCVERS},${DMEMSIZEDEF},${DITUNESDEF},${DSIGNEDDEF},${DJSR75},${DJSR238},${DTESTDEF},${DJMTESTDEF},${DLOGDEF},${DTESTUIDEF},${DCOMPATDEF}" />
		<echo message="preprocess.defines=${preprocess.defines}" />
		<mkdir dir="${tmppreprocess}" />
		<wtkpreprocess srcdir="${presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="yes" />
		<echo message="Preprocess JMUnit pre src if set ${jmunit.src}." />
		<wtkpreprocess srcdir="${jmunit.src}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="jmunit.src" />
		<echo message="Preprocess test UI if set ${testui.presrc}." />
		<wtkpreprocess srcdir="${testui.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" printsymbols="true" if="testui.presrc" />
		<echo message="Preprocess compatiblity code if set ${compat.presrc}." />
		<wtkpreprocess srcdir="${compat.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="compat.presrc" />
		<echo message="Preprocess jar src if set ${jar.presrc}." />
		<wtkpreprocess srcdir="${jar.presrc}" destdir="${tmppreprocess}" encoding="${wtk.encoding}" symbols="${preprocess.defines}" if="jar.presrc" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${tmppreprocess}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${comp.src}" />
		</antcall>
		<antcall target="wtk.src.copy" />
		<delete file="${zipdir}/${build.prefix}src.zip" />
		<zip destfile="${zipdir}/${build.prefix}src.zip" basedir="${comp.src}" />
	</target>

	<!-- Copy preprocessed src to unprocessed source to allow the -->
	<!-- src to be checked in or compiled with Netbeans -->
	<target name="copy.comp.src" depends="prepare" if="unproc.src" >
		<copy todir="${src}" overwrite="true" >
			<!-- remove compatibility classes as these are kept in compatsrc -->
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
		<antcall target="delete.test.src" >
			<param name="dsrc" value="${src}" />
		</antcall>
	</target>

	<!-- Delete preprocessed test src in src -->
	<target name="delete.test.src" depends="prepare" if="no.test">
		<echo message="Deleting test src ${dsrc}." />
		<delete includeemptydirs="true" failonerror="false" >
			<!-- remove testui classes as these are kept in testui -->
			<fileset dir="${dsrc}" includes="**/Compatibility*,**/testutil/**,**/testlcdui/*.java" />
			<fileset dir="${dsrc}/net/sf" />
		</delete>
	</target>

	<target name="copy.unproc.comp" depends="prepare" if="unproc.src" >
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${unproc.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="copy.comp.svn" depends="prepare" if="copy.comp.svn" >
		<copy todir="${src}" overwrite="true" >
			<fileset dir="${comp.src}" />
		</copy>
	</target>

	<target name="wtk.src.copy" if="wtk.src" >
		<delete includeEmptyDirs="true" >
			<fileset dir="${wtk.src}" includes="**/*.java" />
		</delete>
		<copy todir="${wtk.src}" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<path id="project.classpath">
		<pathelement location="lib/JLogMicro.jar" />
	</path>

	<path id="jde.classpath">
		<pathelement location="${jde.home.path}/bin/rapc.jar" />
	</path>

	<target name="compile" depends="prepare">

		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->

		<antcall target="preprocess" />
		<!-- Compile everything, but don't preverify (yet). -->
		<antcall target="display.props" />

		<echo message="add.jars=${add.jars}" />
		<antcall target="add.jars" />
		<antcall target="copy.jar.src" />
		<antcall target="wtk.src.copy" />
		<antcall target="display.props" />
		<echo message="comp.src=${comp.src}" />
		<wtkbuild srcdir="${comp.src}" destdir="${classes}" preverify="false" depend="yes" unless="ecj.jar" />
		<antcall target="ecj.compile" />
		<antcall target="findbugs" />
		<antcall target="pmd" />
	</target>

	<target name="ecj.compile" if="ecj.jar" >
		<echo message="-bootclasspath" />
		<echo message="wtk.midpapi=${wtk.midpapi}" />
		<echo message="-classpath" />
		<echo message="${rt.jar}" />
		<echo message="-d" />
		<echo message="${classes}" />
		<echo message="${comp.src}" />
		<java jar="${ecj.jar}" fork="true" >
			<arg value="-bootclasspath" />
			<arg value="${lib.classpath}" />
			<arg value="-classpath" />
			<arg value="${rt.jar}" />
			<arg value="-d" />
			<arg value="${classes}" />
			<arg value="${comp.src}" />
		</java>
	</target>

	<path id="findbugs.classpath">
		<fileset dir="${findbugs.home}/lib">
			<include name="findbugs-ant.jar"/>
		</fileset>
	</path>

	<target name="findbugs" depends="prepare" if="findbugs.home" >
    	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath" />
		<echo message="wtk.home=${wtk.home}" />
		<mkdir dir="${analyze}" />
		<findbugs home="${findbugs.home}"
			  jvmargs="-Xms512m -Xmx1024m"
              output="html" reportLevel="medium"
              outputFile="${analyze}/findbugs-${build.file.root}.html"
              stylesheet="plain.xsl" >
      <auxClasspath>
		  <fileset dir="${wtk.home}/bin" >
			  <include name="*.jar" />
		  </fileset>
      </auxClasspath>
      <auxClasspath path="${lib.classpath}" />
      <sourcePath path="${comp.src}" />
      <class location="${classes}" />
    </findbugs>
  </target>

	<path id="pmd.classpath">
		<fileset dir="${pmd.home}/lib/">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="pmd" depends="prepare" if="pmd.home" >
		<mkdir dir="${analyze}" />
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />
		<pmd rulesetfiles="rulesets/favorites.xml" encoding="UTF-8" >
			  <!-- undo
			  <formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${analyze}/pmd-${build.file.root}.html"/>
			  -->
			  <formatter type="xml" toFile="${analyze}/pmd-${build.file.root}.xml"/>
			  <fileset dir="${comp.src}">
				  <include name="**/*.java"/>
			  </fileset>
		  </pmd>
		  <xslt style="${pmd.xsl}" in="${analyze}/pmd-${build.file.root}.xml" out="${analyze}/pmd-${build.file.root}.txt" />
		  <exec executable="${cat.cmd}" >
			  <arg value="${analyze}/pmd-${build.file.root}.txt" />
		  </exec>
	  </target>

	<target name="build.testdata" depends="prepare" >
		<echo message="project.test.url=${project.test.url}" />
		<delete dir="${webtestdata}" />
		<copy todir="${webtestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${webtestdata}" token="jar://" value="${project.test.url}" />
		<delete dir="${filetestdata}" />
		<copy todir="${filetestdata}" >
			<fileset dir="../testdata" />
		</copy>
		<replace dir="${filetestdata}" token="jar://" value="${file.test.url}" />
	</target>

	<target name="add.jars" if="add.jars" >
		<unjar src="${ext.jar}" dest="${classes}" />
		<delete includeEmptyDirs="true" >
			<fileset dir="${classes}/META-INF" />
			<fileset dir="${classes}" includes="**/*.jad" />
			<fileset dir="${classes}" includes="**/*MIDlet*" />
		</delete>
	</target>

	<target name="copy.jar.src" if="copy.jar.src" >
		<copy todir="${comp.src}" >
			<fileset dir="${jarsrc}" excludes="**/*MIDlet*" />
		</copy>
	</target>

	<!-- Copy compatsrc to target src directory. -->
	<target name="copy.compat" if="copy.compat" >
		<echo message="copy.compat=${copy.compat}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${compat.src}" includes="**/*.java" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.testui" if="copy.testui" >
		<echo message="copy.testui=${copy.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<!-- Copy testui to target src directory. -->
	<target name="copy.unproc.testui" if="copy.unproc.testui" >
		<echo message="copy.unproc.testui=${copy.unproc.testui}" />
		<copy todir="${comp.src}" overwrite="true" >
			<fileset dir="${testui.src}" includes="**/*.java" />
			<filterset refid="defile.filter" />
		</copy>
	</target>

	<target name="copy.res" depends="prepare" if="need.res" >
		<echo message="res.includes=${res.includes}" />
		<copy todir="${tmpres}/${res.todir}" >
			<fileset dir="${res.dir}" includes="${res.includes}" />
		</copy>
	</target>

	<target name="copy.novice" if="novice" >
		<mkdir dir="${tmpres}/data" />
		<copy tofile="${tmpres}/data/novice.txt" >
			<fileset file="${novice.txt}" />
		</copy>
	</target>

	<target name="copy.test.res" if="need.test.res" >
		<copy todir="${tmpres}/${res.test.todir}" >
			<fileset dir="${res.test.dir}" />
		</copy>
	</target>

	<target name="make.jad" depends="prepare" >
		<wtkjad jadfile="${mjadfile}" manifest="${mmanifest}" jarfile="${mjarfile}" update="${update.parm}" name="${project.name}" vendor="${vendor}" version="${MIDLETVERS}" encoding="UTF-8" >
			<midlet name="${project.name}" icon="/${icons.dir}/${app-icon}" class="${midlet.class}" />
			<midlet name="RssSuite" class="com.substanceofcode.jmunit.businessentities.RssSuite" unless="no.test" />
			<midlet name="UtilitySuite" class="com.substanceofcode.jmunit.utils.UtilitySuite" unless="no.test" />
			<midlet name="RssFeedSuite" class="com.substanceofcode.jmunit.businessentities.RssFeedSuite" unless="no.test" />
			<midlet name="RssItemPerfCompatability4Test" class="com.substanceofcode.jmunit.businessentities.RssItemPerfCompatability4Test" unless="no.test" />
			<attribute name="MIDlet-Description" value="${project.description}" />
			<attribute name="MIDlet-Icon" value="/${icons.dir}/${app-icon}" />
			<attribute name="MIDlet-Info-URL" value="${project.info.url}" />
			<attribute name="MIDlet-Jar-URL" value="${mweb.jarfile}" />
			<attribute name="MicroEdition-Configuration" value="${JCLDCVERS}" />
			<attribute name="MicroEdition-Profile" value="${JMIDPVERS}" />
			<attribute name="MIDlet-Permissions-Opt" value="${PERMISSIONS}" />
			<attribute name="MIDlet-Data-Size" value="3000" />
			<attribute name="novice" value="${NOVICE}" />
			<attribute name="Program-Version" value="${buildinfo}" />
			<attribute name="original-author" value="${original.author}" />
			<attribute name="jlomicro-level" value="${jlomicro-level}" unless="no.test" />
			<attribute name="jlomicro-handlers" value="${jlomicro-handlers}" unless="no.test" />
			<attribute name="jlomicro-ConsoleHandler-formatter" value="${jlomicro-ConsoleHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-FormHandler-limit" value="${jlomicro-FormHandler-limit}" unless="no.test" />
			<attribute name="jlomicro-FormHandler-formatter" value="${jlomicro-FormHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-RecStoreHandler-limit" value="${jlomicro-RecStoreHandler-limit}" unless="no.test" />
			<attribute name="jlomicro-RecStoreHandler-formatter" value="${jlomicro-RecStoreHandler-formatter}" unless="no.test" />
			<attribute name="jlomicro-com-substanceofcode-utils-SortUtil-level" value="${jlomicro-com-substanceofcode-utils-SortUtil-level}" unless="no.test" />
		</wtkjad>

	</target>

	<target name="package.preverify" depends="prepare" >
		<wtkpackage jarfile="${bin}/${project.name}.jar" jadfile="${bin}/${project.name}.jad" manifest="${bin}/manifest.mf" cldc="${JCLDCVERS}" profile="${JMIDPVERS}" preverify="false" obfuscate="false" verbose="true" >

			<!-- Package our newly compiled classes and the
                 resources from the WTK's demo application. -->

			<fileset dir="${classes}" />
			<fileset dir="${tmpres}" />

		</wtkpackage>

		<!-- Preverify is the default in this case, but we set it -->
		<!-- so that it's clear.  -->

		<wtkpreverify jarfile="${bin}/${project.name}.jar" tojarfile="${bin}/${build.file.root}.jar" />
		<!--  Can't get this to work.
		<proguard microedition="true" preverify="true" obfuscate="false" shrink="false" optimize="false" >
			-injar ${bin}/${project.name}.jar
			-outjar ${bin}/${build.file.root}.jar
			-libraryjars ${lib.classpath}

		</proguard>
		-->

		<copy file="${bin}/${build.file.root}.jar" tofile="${bin}/${project.name}.jar" />
	</target>

	<target name="tool.sign" depends="prepare,prepare.thawte,prepare.godaddy" if="signed" >
		<parallel>
		<sequential>
		<echo message="tsalias=${tsalias}" />
		<echo message="tsstorepass=${tsstorepass}" />
		<echo message="tskeystore=${tskeystore}" />
		<echo message="tskeypass=${tskeypass}" />
		<signjar jar="${jsjar.in}" alias="${tsalias}" storepass="${tsstorepass}" keystore="${tskeystore}" keypass="${tskeystore}" verbose="true" internalsf="true" force="true" />
		<!-- Try task above
		<exec executable="${env.JAVA_HOME}/bin/${jarsigner.cmd}" >
			<arg value="-verbose" />
			<arg value="-keystore" />
			<arg value="${tskeystore}" />
			<arg value="-storepass" />
			<arg value="${tskeypass}" />
			<arg value="${jsjar.in}" />
			<arg value="${tsalias}" />
		</exec>
		-->
		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${jsjad1.in}" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${jsjar.in}" />
			<param name="mweb.jarfile" value="${jsjar.fn}" />
			<param name="update.parm" value="true" />
		</antcall>
		<delete file="${jsjad2.in}" />
		<java jar="${wtk.home}/bin/JadTool.jar" fork="true" >
			<arg value="-addcert" />
			<arg value="-alias" />
			<arg value="${tsalias}" />
			<arg value="-storepass" />
			<arg value="${tsstorepass}" />
			<arg value="-keystore" />
			<arg value="${tskeystore}" />
			<arg value="-storepass" />
			<arg value="${tskeypass}" />
			<arg value="-inputjad" />
			<arg value="${jsjad1.in}" />
			<arg value="-outputjad" />
			<arg value="${jsjad2.in}" />
		</java>
		<waitfor maxwait="30" maxwaitunit="second">
			<available file="${jsjad2.in}"/>
		</waitfor>
	    <echo message="First sleep finished." />
		<delete file="${jsjad3.in}" />
		<java jar="${wtk.home}/bin/JadTool.jar" fork="true" >
			<arg value="-addjarsig" />
			<arg value="-alias" />
			<arg value="${tsalias}" />
			<arg value="-jarfile" />
			<arg value="${jsjar.in}" />
			<arg value="-storepass" />
			<arg value="${tsstorepass}" />
			<arg value="-keypass" />
			<arg value="${tskeypass}" />
			<arg value="-keystore" />
			<arg value="${tskeystore}" />
			<arg value="-storepass" />
			<arg value="${tskeypass}" />
			<arg value="-inputjad" />
			<arg value="${jsjad2.in}" />
			<arg value="-outputjad" />
			<arg value="${jsjad3.in}" />
		</java>
		<waitfor maxwait="30" maxwaitunit="second">
			<available file="${jsjad3.in}"/>
		</waitfor>
	    <echo message="Second sleep finished." />
		<copy file="${jsjad3.in}" tofile="${jsjad.out}" overwrite="true" />
		</sequential>
		</parallel>
	</target>

	<target name="antenna.wtksign" depends="prepare,prepare.thawte,prepare.godaddy" if="signed" >
		  <echo message="&lt;wtksign keystore=&quot;${tskeystore}&quot; jadfile=&quot;${sjadfile}&quot; jarfile=&quot;${sjarfile}&quot; certalias=&quot;${tsalias}&quot; storepass=&quot;${tsstorepass}&quot; keypass=&quot;${tsstorepass}&quot; &gt;" />
		<wtksign keystore="${tskeystore}" jadfile="${sjadfile}" jarfile="${sjarfile}" certalias="${tsalias}" storepass="${tsstorepass}" certpass="${tsstorepass}" />
		<!-- Not needed
		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${sjadfile}" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${sjarfile}" />
			<param name="update.parm" value="true" />
		</antcall>
		-->
	</target>

	<target name="build" depends="prepare" >
		<antcall target="display.props" />
		<!-- Copy a JAD file from the WTK's demo applications.
             Caution: Ant only copies this the first time. Also
             make a directory to compile into. -->
		<mkdir dir="${bin}" />
		<delete dir="${tmpres}" />
		<mkdir dir="${tmpres}" />

		<antcall target="copy.res" />
		<antcall target="copy.novice" />
		<antcall target="copy.test.res" />

		<echo message="MIDLETVERS=${MIDLETVERS}" />

		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${bin}/${project.name}.jad" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${bin}/${project.name}.jar" />
			<param name="update.parm" value="false" />
		</antcall>
		<!-- Package everything. Most of the necessary information is
             contained in the JAD file. Also preverify the result this
             time. To obfuscate everything, set the corresponding
             parameter to "true" (requires RetroGuard or ProGuard). The
             version parameter increments the MIDlet-Version by one. -->

	    <echo message="obfuscate=${obfuscate}" />
		<!-- package -->
		<antcall target="package.preverify" inheritAll="true" />

		<!-- Can use proguard to keep public classes.
			<keep access="public" />
			-->
		<if>
			<equals arg1="${keep.obfuscate}" arg2="true" />
			<then>
			<echo message="keep.obfuscate=${keep.obfuscate}" />
			<delete file="${bin}/${build.file.root}.jar" />
			<!-- Took out optimizationpasses="${nbr.optimization.passes} -->
			<!-- -printmapping as argument with <argument value=... gives a partial file. -->
			<wtkobfuscate jarfile="${bin}/${project.name}.jar" tojarfile="${bin}/${build.file.root}.jar" >
				<preserve class="com.substanceofcode.utils.CauseRecStoreException" />
			</wtkobfuscate>
			<!-- Problems with printmapping="${tmpres}/obfuscatemap.txt" --> 
			<!-- Problems with direct proguard.
			<proguard microedition="true" preverify="true" obfuscate="true">
				-injar ${bin}/${project.name}.jar
				-outjar ${bin}/${build.file.root}.jar
				-libraryjars ${lib.classpath}

				-keepclasseswithmembers public class * {
				     public void startApp();
				 }
			</proguard>
			-->

			<antcall target="package.preverify" inheritAll="true" />
			<!-- print/apply mapping causes errors.  applymapping="${tmpres}/obfuscatemap.txt" -->
			<proguard microedition="true" preverify="true" optimizationpasses="${nbr.optimization.passes}" obfuscate="true">
				-injar ${bin}/${project.name}.jar
				-outjar ${bin}/${build.file.root}.jar
				-libraryjars ${lib.classpath}

				-keepclasseswithmembers public class * {
				     public void startApp();
				 }
			</proguard>

			<copy file="${bin}/${build.file.root}.jar" tofile="${bin}/${project.name}.jar" />

			<antcall target="make.jad" inheritAll="true" >
				<param name="mjadfile" value="${bin}/${project.name}.jad" />
				<param name="mmanifest" value="${bin}/manifest.mf" />
				<param name="mjarfile" value="${bin}/${project.name}.jar" />
				<param name="update.parm" value="true" />
			</antcall>
			</then>
		</if>
			<!-- UNDO
		<wtkobfuscate jarfile="${bin}/${project.name}.jar" obfuscator="proguard" if="keep.obfuscate" >
			<argument value="-keep public class ${obfuscate.classes}" />
		</wtkobfuscate>
		-->
		<!-- Include version in the file so that they can be uploaded to -->
		<!-- download sites where the name must be unique.  -->

		<copy file="${bin}/${project.name}.jar" tofile="${bin}/${build.file.root}.jar" />
		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${bin}/${build.file.root}.jad" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${bin}/${build.file.root}.jar" />
			<param name="update.parm" value="false" />
		</antcall>
		<!-- Do not use as it does not sign the jar file and does only 1 certificate for the jad.
		<antcall target="antenna.wtksign" inheritAll="true" >
			<param name="stsaurl" value="${thawte.tsa.url}" />
			<param name="sjadfile" value="${bin}/${build.file.root}.jad" />
			<param name="sjarfile" value="${bin}/${build.file.root}.jar" />
		</antcall>
		-->
		<antcall target="tool.sign" inheritAll="true" >
			<param name="jsadd.parm" value="-addcert" />
			<param name="jsjar.in" value="${bin}/${build.file.root}.jar" />
			<param name="jsjar.fn" value="${build.file.root}.jar" />
			<param name="jsjad1.in" value="${bin}/${build.file.root}.jad" />
			<param name="jsjad2.in" value="${bin}/${build.file.root}-in2.jad" />
			<param name="jsjad3.in" value="${bin}/${build.file.root}-in3.jad" />
			<param name="jsjad.out" value="${bin}/${build.file.root}.jad" />
		</antcall>

		<copy file="${bin}/${build.file.root}.jar" todir="${dist}" />
		<copy file="${bin}/${build.file.root}.jad" todir="${dist}" />
		<copy file="${bin}/${project.name}.jar" tofile="${build}/${build.prefix}${build.jar}" />
		<antcall target="create.prc" inheritAll="true" />
		<!-- Manifest changes based on MIDP/JSR's so use prefixes to -->
		<!-- identify which is which -->
		<copy file="${bin}/manifest.mf" todir="${build}/${build.prefix}manifest-${FMIDLETVERSROOT}" overwrite="true" />

		<copy todir="${dist}" >
			<fileset file="${docs}/README.txt" />
			<filterset>
				<filter token="STAGEFILE" value="${stage.file}" />
			</filterset>
		</copy>
		<copy todir="${distall}" file="${dist}/README.txt" />
		<copy todir="${distall}" >
			<fileset file="${docs}/READMEAll.txt" />
			<fileset file="${docs}/READPODCASTME.txt" />
			<filterset>
				<filter token="STAGEFILE" value="${stage.file}" />
			</filterset>
		</copy>
	</target>

	<target name="create.prc" depends="prepare" if="wtk.wme.home" >
		<wtkmakeprc jarfile="${bin}/${project.name}.jar" name="${project.name}"  highres="true" creator="${prc.creater}" longname="${prc.longname}" />
		<mkdir dir="${dist}/${build.prefix}prc" />
		<move file="${bin}/${project.name}.prc" todir="${dist}/${build.prefix}prc" />
	</target>

	<target name="exec.create.rim.files" depends="prepare" if="rim.home" >
		<copy file="${bin}/${project.name}.jar" tofile="${bin}/${build.file.root}_cod_in.jar" />
		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${bin}/${build.file.root}_cod_in.jad" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${bin}/${build.file.root}_cod_in.jar" />
			<param name="update.parm" value="false" />
		</antcall>
		<exec executable="${rim.home}\\bin\\rapc" >
			<arg value="import=&quot;${rim.home}\\lib\\net_rim_api.jar&quot;" />
			<arg value="codename=${project.name}" />
			<arg value="-midlet" />
			<arg value="jad=${dist}/${build.file.root}_cod.jad" />
			<arg value="${bin}/${build.file.root}_cod_in.jar" />
		</exec>
		<move file="${project.name}.cso" tofile="${dist}/${build.prefix}${project.name}_${FMIDLETVERSROOT}.cso" />
		<move file="${project.name}.cod" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cod" />
		<move file="${project.name}.debug" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.debug" />
	</target>

	<target name="jar.create.rim.files" depends="prepare" if="jar.jde.home" unless="signed" >
	    <echo message="basedir=${basedir}" />
	    <echo message="jde.home=${jde.home}" />
	    <echo message="${basedir}/${dist}/${build.file.root}.jar=${basedir}/${dist}/${build.file.root}.jar}" />
		<copy file="${bin}/${project.name}.jar" tofile="${bin}/${project.name}_cod_in.jar" />
		<antcall target="make.jad" inheritAll="true" >
			<param name="mjadfile" value="${bin}/${build.file.root}_cod_in.jad" />
			<param name="mmanifest" value="${bin}/manifest.mf" />
			<param name="mjarfile" value="${bin}/${build.file.root}_cod_in.jar" />
			<param name="update.parm" value="false" />
		</antcall>
		<mkdir dir="${rim.bin}" />
		<java classpathref="jde.classpath" classname="net.rim.tools.compiler.Compiler" >
			<arg value="import=${jde.home.path}/lib/net_rim_api.jar" />
			<arg value="codename=${project.name}" />
			<arg value="-midlet" />
			<arg value="jad=${basedir}/${bin}/${build.file.root}_cod_in.jad" />
			<arg value="${basedir}/${bin}/${project.name}_cod_in.jar" />
		</java>
		<move file="../${project.name}.cso" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cso" />
		<move file="../${project.name}.cod" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.cod" />
		<move file="../${project.name}.debug" tofile="${dist}/${build.prefix}${project.name}-${FMIDLETVERSROOT}.debug" />
	</target>

	<target name="jde.create.rim.files" depends="prepare" if="bb.jde.home" unless="signed" >
	    <echo message="basedir=${basedir}" />
	    <echo message="jde.home=${jde.home}" />
	    <echo message="${basedir}/${dist}/${build.file.root}.jar=${basedir}/${dist}/${build.file.root}.jar}" />
	    <echo message="rim.bin=${rim.bin}" />
		<!-- Check with defines in jdk.home rapc. -->
		<property name="rapc.preprocess.defines" value="${DMIDPVERS};${DCLDCVERS};${DMEMSIZEDEF};${DITUNESDEF};${DSIGNEDDEF};${DJSR75};${DJSR238};${DTESTDEF};${DJMTESTDEF};${DLOGDEF};${DTESTUIDEF};${DCOMPATDEF}" />
		<echo message="prapc.reprocess.defines=${prapc.reprocess.defines}" />
		<mkdir dir="${rim.bin}" />
		<rapc jdehome="${jde.home}" exepath="${wtk.home}/bin" srcdir="${comp.src}" destdir="${rim.bin}" output="${build.prefix}${project.name}-${FMIDLETVERSROOT}" defines="${prapc.reprocess.defines}" verbose="true" nodebug="true" >
			<jdp type="midlet" title="${project.name}" vendor="${vendor}" version="${MIDLETVERS}" description="${project.description}" midletclass="${midlet.class}" icon="/${icons.dir}/${app-icon}" />
		</rapc>
		<alx destdir="${rim.bin.alx}" filename="${build.file.root}.alx" >
			<application id="${midlet.package}" name="${midlet.name}" vendor="${vendor}" version="${MIDLETVERS}" description="${project.description}" >
				<codset>
					<fileset dir="${rim.bin}" includes="*.cod" />
				</codset>
			</application>
		</alx>
		<move file="${rim.bin}/${build.file.root}.cso" tofile="${dist}/${build.file.root}.cso" />
		<move file="${rim.bin}/${build.file.root}.cod" tofile="${dist}/${build.file.root}.cod" />
		<move file="${rim.bin.alx}/${build.file.root}.alx" tofile="${dist}/${build.file.root}.alx" />
		<zip destfile="${rim.bin}/${build.file.root}.zip" basedir="${rim.bin.alx}" />
		<move file="${rim.bin}/${build.file.root}.zip" tofile="${dist}/${build.file.root}.zip" />
	</target>

	<target name="svn.op.dist" if="${need.svn.preprocessed}" unless="skip.svn.op" >
		<delete dir="${op.dir}" />
		<mkdir dir="${op.dir}" />

		<echo message="${svn.pgm} ${svn.op} ${svn.url} ${svn.src}" />
		<exec executable="${svn.pgm}" dir="${op.dir}" >
			<arg value="${svn.op}" />
			<arg value="${svn.url}" />
			<arg value="${svn.src}" />
		</exec>
		<move todir="${op.dir}/src" >
			<fileset dir="${op.dir}/${svn.src}/src" />
		</move>
		<move todir="${op.dir}/presrc" >
			<fileset dir="${op.dir}/${svn.src}/presrc" />
		</move>
		<move todir="${op.dir}/testpresrc" >
			<fileset dir="${op.dir}/${svn.src}/testpresrc" />
		</move>
		<move todir="${op.dir}/compatpresrc" >
			<fileset dir="${op.dir}/${svn.src}/compatpresrc" />
		</move>
		<move todir="${op.dir}/testdata" >
			<fileset dir="${op.dir}/${svn.src}/testdata" />
		</move>
		<mkdir dir="${op.dir}/docs" />
		<move todir="${op.dir}/docs" >
			<fileset file="${op.dir}/${svn.src}/docs/README.txt" />
		</move>
		<move todir="${op.dir}/manifestsrc" >
			<fileset dir="${op.dir}/${svn.src}/manifestsrc" />
		</move>
		<move todir="${op.dir}/zipedsrc" >
			<fileset dir="${op.dir}/${svn.src}/zipedsrc" />
		</move>
		<move todir="${op.dir}/wtkbuild" >
			<fileset dir="${op.dir}/${svn.src}/wtkbuild" />
		</move>
		<copy todir="${dist}" file="${op.dir}/${svn.src}/gpl-2.txt" />
		<copy todir="${dist}" file="${op.dir}/${svn.src}/lgpl-2_1.txt" />
		<move todir="${op.dir}" >
			<fileset file="${op.dir}/${svn.src}/release_notes.txt" />
			<fileset file="${op.dir}/${svn.src}/gpl-2.txt" />
			<fileset file="${op.dir}/${svn.src}/lgpl-2_1.txt" />
			<fileset file="${op.dir}/${svn.src}/build.xml" />
		</move>
		<move todir="${op.dir}/nbproject" >
			<fileset dir="${op.dir}/${svn.src}/nbproject" />
		</move>
		<delete dir="${op.dir}/nbproject/private" />
		<move todir="${op.dir}/nbproject/private" >
			<fileset dir="${op.dir}/${svn.src}/nbproject-private" />
		</move>
		<delete dir="${op.dir}/${svn.src}" />
		<!--
		<svn javahl="false" >
			<export srcUrl="${svn.url}" srcPath="${svn.src}" destPath="${op.dir}" />
		</svn>
		-->
	</target>

	<!-- Distribute expoted source to ${preprocessed} -->
	<target name="dist.preprocessed" if="need.dist.preprocessed" >
		<delete dir="${preprocessed}" />
		<mkdir dir="${preprocessed}" />
		<copy todir="${preprocessed}/src" >
			<fileset dir="${comp.src}" includes="**/*.java" />
		</copy>
	</target>

	<target name="dist.svn" if="need.dist.svn" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${svnexport}" />
		</antcall>
	</target>

	<target name="dist.svn.dirs" depends="prepare" if="need.dist.svn.dirs" >
		<antcall target="svn.op.dist" >
			<param name="svn.op" value="export" />
			<param name="op.dir" value="${main}" />
		</antcall>
	</target>

	<target name="google.upload.line.append" depends="prepare" if="upload.to.google">
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${file.name} --summary=&quot;${stage.stable.text} ${signed.text}${device.type} MIDP ${wtk.midp.version} ${smartphone} ${jsr75} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage.txt}${latest.binary.desc}&quot; ${append.google.labels}&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
	</target>

	<target name="google.upload.line.append.file" depends="prepare" unless="${no.individual.file}" >
		<antcall target="google.upload.line.append" inheritAll="true" >
			<param name="file.name" value="${build.file.root}${fext.suffix}.${fext}" />
		</antcall>
	</target>

	<target name="google.upload.append" depends="prepare" if="upload.to.google">
		<property name="jsr" value="" />
		<property name="google.labels" value="" />
		<property name="latest.binary.desc" value="latest binary for direct phone install this is included in binary zip.  See documentation for which program to use." />
		<echo message="cd */RSS*/dist&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="pwd&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<antcall target="google.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="jad" />
			<param name="fext.suffix" value="" />
			<param name="append.google.labels" value="Deprecated,Type-Package" />
			<param name="device.type" value="(not Blackberry)" />
		</antcall>
		<antcall target="google.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="cod" />
			<param name="fext.suffix" value="" />
			<param name="append.google.labels" value="${google.labels}" />
			<param name="device.type" value="Blackberry" />
		</antcall>
		<antcall target="google.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="jar" />
			<param name="fext.suffix" value="" />
			<param name="append.google.labels" value="${google.labels}" />
			<param name="device.type" value="(not Blackberry)" />
		</antcall>
		<echo message="cd ../../..&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="pwd&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
	</target>

	<target name="sftp.upload.line.append" depends="prepare" if="upload.to.sftp">
		<echo message="put ${file.name}&#10;" file="${sftp.in.file}" append="true" />
	</target>

	<target name="sftp.upload.line.append.file" depends="prepare" >
		<antcall target="sftp.upload.line.append" inheritAll="true" >
			<param name="file.name" value="${build.file.root}${fext.suffix}.${fext}" />
		</antcall>
	</target>

	<target name="sftp.upload.append.sun" depends="prepare" if="upload.to.sftp" unless="sftp.no.sun" >
		<antcall target="sftp.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="jad" />
			<param name="fext.suffix" value="" />
		</antcall>
		<antcall target="sftp.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="jar" />
			<param name="fext.suffix" value="" />
		</antcall>
	</target>

	<target name="sftp.upload.append.rim" depends="prepare" if="upload.to.sftp" unless="signed" >
		<antcall target="sftp.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="cso" />
			<param name="fext.suffix" value="" />
		</antcall>
		<antcall target="sftp.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="jad" />
			<param name="fext.suffix" value="_cod" />
		</antcall>
		<antcall target="sftp.upload.line.append.file" inheritAll="true" >
			<param name="fext" value="cod" />
			<param name="fext.suffix" value="" />
		</antcall>
	</target>

	<target name="sftp.upload.append" depends="prepare" if="upload.to.sftp">
		<antcall target="sftp.upload.append.rim" inheritAll="true" />
		<antcall target="sftp.upload.append.sun" inheritAll="true" />
	</target>

	<target name="sftp.upload.archives" depends="prepare" if="upload.to.sftp">
		<echo message="lcd ../${distproject-name}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ${dist.project.src.zip}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ${dist.project.expert.zip}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ${dist.project.smartphone.zip}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ${dist.project.bin.zip}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="lcd ../${dist.name}&#10;" file="${sftp.in.file}" append="true" />
	</target>

	<target name="sftp.upload.initialize" depends="prepare" if="upload.to.sftp">
		<mkdir dir="${ftp.in.dir}" />
		<echo message="cd ${sftp.root.dir}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="pwd&#10;" file="${sftp.in.file}" append="true" />
		<property name="ftp.vers.dir" value="Version\ ${MIDLETVERSROOT}\ ${ftp.ustage.txt}Source\ and\ Binaries" />
		<echo message="-mkdir ${ftp.vers.dir}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="cd ${ftp.vers.dir}&#10;" file="${sftp.in.file}" append="true" />
		<echo message="pwd&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ../${ftpdist.name}/apache.htaccess .htaccess&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ../${main}/changelog.txt changelog-${FMIDLETVERSROOT}.txt&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ../${main}/gpl-2.txt gpl-2.txt&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ../${main}/lgpl-2_1.txt lgpl-2_1.txt&#10;" file="${sftp.in.file}" append="true" />
		<echo message="put ../${main}/release_notes.txt release_notes-${FMIDLETVERSROOT}.txt&#10;" file="${sftp.in.file}" append="true" />
		<antcall target="sftp.upload.archives" inheritAll="true" />
	</target>

	<target name="sourceforge.initialize" depends="prepare" if="upload.to.sftp">
		<antcall target="sftp.upload.initialize" inheritAll="true" >
			<param name="ftp.in.dir" value="${distsourceforge}" />
			<param name="sftp.in.file" value="${sourceforge.ftp.in.file}" />
			<param name="sftp.root.dir" value="${sourceforge.rootdir}" />
		</antcall>
	</target>

	<target name="yinlight.initialize" depends="prepare" if="upload.to.sftp">
		<antcall target="sftp.upload.initialize" inheritAll="true" >
			<param name="ftp.in.dir" value="${distyinlight}" />
			<param name="sftp.in.file" value="${yinlight.ftp.in.file}" />
			<param name="sftp.root.dir" value="${yinlight.rootdir}" />
		</antcall>
	</target>

	<!-- Distribute the version (e.g. MIDP-1.0, MIDP-2.0, etc) to -->
	<!-- it's target/build and target/dist target/main -->
		 
	<target name="dist.version" depends="prepare" >
		<property name="no.test" value="true" />
		<mkdir dir="${distgooglecode}" />
		<!-- delete TODO
		<delete dir="${build.vers}" />
		<mkdir dir="${build.vers}" />
		-->
		<antcall target="clean.compile" />
		<antcall target="compile" />
		<antcall target="dist.preprocessed" />

		<delete dir="${compiled}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<copy todir="${compiled}" >
				<fileset dir="${classes}" />
			</copy>
			</then>
		</if>
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<antcall target="build" inheritAll="true" >
				<param name="build.jar" value="before-obfuscation.jar" />
			</antcall>
			</then>
		</if>
		<delete dir="${preverified}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<mkdir dir="${preverified}" />
			<unjar src="${build}/${build.prefix}before-obfuscation.jar" dest="${preverified}" />
			</then>
		</if>
		<antcall target="build" >
			<param name="build.jar" value="obfuscated.jar" />
		</antcall>
		<antcall target="google.upload.append" inheritAll="true" />
		<antcall target="sftp.upload.append" >
			<param name="sftp.in.file" value="${yinlight.ftp.in.file}" />
		</antcall>
		<antcall target="sftp.upload.append" >
			<param name="sftp.in.file" value="${sourceforge.ftp.in.file}" />
		</antcall>
		<antcall target="exec.create.rim.files" inheritAll="true" />
		<antcall target="jar.create.rim.files" inheritAll="true" >
			<param name="jde.home" value="${jar.jde.home}" />
		</antcall>
		<antcall target="jde.create.rim.files" inheritAll="true" >
			<param name="jde.home" value="${bb.jde.home}" />
		</antcall>
		<delete dir="${obfuscated}" />
		<if>
			<equals arg1="${make.build.files}" arg2="true" />
			<then>
			<mkdir dir="${obfuscated}" />
			<unjar src="${build}/${build.prefix}obfuscated.jar" dest="${obfuscated}" />
			<delete dir="${obfuscated}/manifest.mf" />
			</then>
		</if>
		<delete file="${project.name}.jar" />
		<delete file="../${project.name}.jar" />
	</target>

	<!-- Compile using WTK with MIDP-1.0 and test -->
	<target name="compile.1.0" depends="prepare.midp1.0,prepare.cldc1.0">
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and test -->
	<target name="compile.2.0" depends="prepare.midp2.0,prepare.cldc1.0">
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Future as CLDC-1.1 features not used -->
	<!-- Compile using WTK with MIDP-2.0 CLDC-1.1 and test -->
	<target name="compile.2.0.cldc.1.1" depends="prepare.midp2.0,prepare.cldc1.1">
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="compile.2.0.cldc.1.1.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Run using WTK with MIDP-2.0 and JSR-75 and test -->
	<target name="run.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0">
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="build" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="run" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, JSR-75, previous code and test -->
	<target name="compile.2.0.jsr75.test" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" >
		<antcall target="display.props" />
		<antcall target="compile" inheritAll="true" >
			<param name="src" value="${src}" />
			<param name="unproc.src" value="${unproc.src}" />
			<param name="presrc" value="${presrc}" />
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, Itunes, JSR-75 and test -->
	<target name="compile.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, Itunes, JSR-75 and test -->
	<target name="compile.2.0.cldc.1.1.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, Itunes, Signed, JSR-75 and test -->
	<target name="compile.2.0.cldc.1.1.itunes.signed.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.signed,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 1.0 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.1.0" depends="prepare.midp1.0,prepare.cldc1.0" >
		<antcall target="preprocess" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 as a release (no test) -->
	<!-- This puts the code into src directory. -->
	<!-- There is no novice preprocess given that novice has the same -->
	<!-- compile options as MIDP-2.0. -->
	<target name="dist.preprocess.2.0" depends="prepare.midp2.0,prepare.cldc1.0">
		<antcall target="preprocess" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" >
		<antcall target="preprocess" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0, and Itunes as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.itunes" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes" >
		<antcall target="preprocess" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Preprocess for MIDP 2.0, Itunes, and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" >
		<antcall target="preprocess" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future preprocess for MIDP 2.0 and JSR-238 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="dist.preprocess.2.0.jsr238" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr238" >
		<antcall target="preprocess" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="copy.comp.src" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- test preprocess for MIDP 2.0 and JSR-75 as a release (no test) -->
	<!-- This puts the code into src directory for use with NetBeans, etc. -->
	<target name="test.preprocess.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75">
		<antcall target="preprocess" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
		<!-- Copy preprocessed src to unprocessed source to allow the -->
		<!-- src to be checked in or compiled with Netbeans -->
		<antcall target="copy.comp.src" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="dist.compile.1.0" depends="prepare.midp1.0,prepare.cldc1.0" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 as a release (no test) -->
	<target name="dist.compile.2.0" depends="prepare.midp2.0,prepare.cldc1.0" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and JSR-75 for release -->
	<target name="dist.compile.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0 and Itunes and JSR-75 for release -->
	<target name="dist.compile.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile using WTK with MIDP-2.0, CLDC 1.1, Itunes, JSR-75 and test -->
	<target name="dist.compile.2.0.cldc.1.1.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Compile for MIDP 2.0, CLDC 1.1, Itunes, Signed and JSR-75 for release -->
	<target name="dist.compile.2.0.cldc.1.1.itunes.signed.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.signed,prepare.jsr75" >
		<antcall target="compile" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Future.  No code for JSR-238 now. -->
	<!-- Compile for MIDP 1.0 as a release (no test) -->
	<target name="compile.2.0.jsr238" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr238" > 
		<antcall target="compile" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- Compile all. -->
	<target name="compile.all" > 
		<antcall target="compile.1.0" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.cldc.1.1" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.jsr75" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.cldc.1.1.jsr75" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.itunes.jsr75" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.cldc.1.1.itunes.jsr75" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
		<antcall target="compile.2.0.jsr75.test" >
			<param name="no.staging" value="true" />
			<param name="no.release" value="true" />
		</antcall>
	</target>

	<!-- These are do create release versions for MIDP-1.0, MIDP-2.0, -->
	<!-- MIDP-2.0 itunes, MIDP-2.0 and JSR-75, and MIDP-2.0 itunes and -->
	<!--JSR-75 -->
	<target name="dist.midp.1.0" depends="prepare.midp1.0,prepare.cldc1.0,prepare.stage,prepare.no.stage" unless="no.1.0" >
		<antcall target="dist.version" inheritAll="yes" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.1.0.signed" depends="prepare.midp1.0,prepare.cldc1.0,prepare.signed" unless="no.1.0.signed" >
		<antcall target="dist.version" inheritAll="yes" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0" depends="prepare.midp2.0,prepare.cldc1.0" unless="no.2.0" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=${stage.featured}Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.signed" depends="prepare.midp2.0,prepare.cldc1.0,prepare.signed" unless="no.2.0.signed" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=${stage.featured}Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Do MIDP 2.0 with novice version. -->
	<target name="dist.midp.2.0.novice" depends="prepare.midp2.0,prepare.cldc1.0,prepare.novice" unless="no.2.0.novice" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1" depends="prepare.midp2.0,prepare.cldc1.1" unless="no.2.0.cldc.1.1" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="jsr" value="JSR-75" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr75.signed" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75,prepare.signed" unless="no.2.0.jsr75.signed" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="jsr" value="JSR-75" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.jsr75" unless="no.2.0.cldc.1.1.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.itunes" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes" unless="no.2.0.itunes" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.itunes" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes" unless="no.2.0.cldc.1.1.itunes" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.itunes.signed" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.signed" unless="no.2.0.cldc.1.1.itunes.signed" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.jsr75" unless="no.2.0.cldc.1.1.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="false" />
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.cldc.1.1.itunes.signed.jsr75" depends="prepare.midp2.0,prepare.cldc1.1,prepare.itunes,prepare.signed,prepare.jsr75" unless="no.2.0.cldc.1.1.itunes.signed.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="upload.to.google" value="true" />
			<param name="google.labels" value="--labels=Type-Executable,OpSys-All" />
			<param name="upload.to.sftp" value="true" />
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist.midp.2.0.jsr238" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr238" unless="no.2.0.jsr238" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="make.build.files" value="false" />
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 1.0 version. -->
	<target name="package.midp.1.0"  depends="prepare.midp1.0,prepare.cldc1.0" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 version. -->
	<target name="package.midp.2.0" depends="prepare.midp2.0,prepare.cldc1.0" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 with JSR-75 version. -->
	<target name="package.midp.2.0.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.jsr75" unless="no.2.0.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<!-- Package MIDP 2.0 with itunes version with JSR-75 version. -->
	<target name="package.midp.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="dist.version" inheritAll="true" >
			<param name="no.release" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="run.midp.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" unless="no.2.0.itunes.jsr75" >
		<antcall target="run" inheritAll="true" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="googlecode.initialize" depends="prepare" >
		<echo message="#!/bin/bash&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.src.zip} --summary=&quot;${stage.stable.text} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage.txt}latest source zip.&quot; --labels=Type-Source&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.expert.zip} --summary=&quot;${stage.stable.text} Expert (use ${project.file.prefix}-v${MIDLETVERSROOT}-bin.zip most people don't need expert version and expert is confusing) ${stage.stable.text} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage.txt}latest binaries for 4% of phones&quot; --labels=Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.smartphone.zip} --summary=&quot;${stage.stable.text} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage.txt}latest binaries for smartphones only (this uses up too much memory for non-smartphones.  also included in expert binaries)&quot; --labels=Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
		<echo message="googlecode_upload.pl --user=${svn.user} --pass=${svn.pass} --project=${svn.src} --progress --file=${dist.project.bin.zip} --summary=&quot;${stage.stable.text} Mobile RSS Reader - Version ${MIDLETVERSROOT} ${ustage.txt}latest binaries for 96% of phones (also included in expert binaries)&quot; --labels=${stage.featured}Type-Archive,OpSys-All&#10;" file="${distgooglecode}/googleupload.sh" append="true" />
	</target>

	<target name="make.zip.files" depends="prepare" unless="skip.svn.op" >
		<property name="distdir" value="${distjardir}/RSSReader-${FMIDLETVERSROOT}${dist.stage.file}" />
		<mkdir dir="${distdir}" />
		<copy todir="${distdir}/dist" overwrite="true" >
			<fileset dir="${dist}" excludes="**/RE*.txt" />
		</copy>
		<copy file="${distall}/READMEAll.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<zip destfile="${distproject}/${dist.project.expert.zip}" basedir="${distjardir}" />
		<delete includeemptydirs="true">
			<fileset dir="${distdir}" excludes="**/**smartphone**" />
			<fileset dir="${distdir}" includes="**/**midp10**,**/**cldc10**,**/*.debug" />
		</delete>
		<delete includeemptydirs="true">
			<fileset dir="${distdir}" includes="**/**smartphone_jsr75_${project.name}**.jar,**/**smartphone_${project.name}**.jar" />
		</delete>
		<copy file="${distall}/READPODCASTME.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<zip destfile="${distproject}/${dist.project.smartphone.zip}" basedir="${distjardir}" />
		<delete includeemptydirs="true">
			<fileset dir="${distdir}"/>
		</delete>
		<copy todir="${distdir}/dist" overwrite="true" >
			<fileset dir="${dist}" excludes="**/RE*.txt,**/**smartphone**,**/*cldc11**" />
			<fileset dir="${dist}" includes="**/midp10**cldc10**,**midp20**cldc10**" />
		</copy>
		<copy file="${distall}/README.txt" tofile="${distdir}/dist/README.txt" overwrite="true" />
		<zip destfile="${distproject}/${dist.project.bin.zip}" basedir="${distjardir}" />
		<delete dir="${distdir}/dist" />
		<copy todir="${distdir}" overwrite="true" >
			<fileset dir="${main}" />
		</copy>
		<zip destfile="${distproject}/${dist.project.src.zip}" basedir="${distjardir}" />
		<copy todir="${distdir}/dist" overwrite="true" >
			<fileset dir="${dist}" excludes="**/RE*.txt" />
		</copy>
	</target>

	<target name="dist.dev.status" depends="release.buildno,release.prepare,prepare.stage,prepare.no.stage" >
		<antcall target="clean" />
		<delete dir="${dist}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${distgooglecode}" />
		<mkdir dir="${distall}" />
		<delete dir="${build}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	    <echo message="main build.number=${build.number}" />
		<antcall target="dist.svn.dirs" />
		<property name="dist.project.prefix" value="${project.file.prefix}-v${FMIDLETVERSROOT}${dist.stage.file}" />
		<property name="dist.project.expert.zip" value="${dist.project.prefix}-expert-bin.zip" />
		<property name="dist.project.smartphone.zip" value="${dist.project.prefix}-smartphone-bin.zip" />
		<property name="dist.project.bin.zip" value="${dist.project.prefix}-bin.zip" />
		<property name="dist.project.src.zip" value="${dist.project.prefix}-src.zip" />
		<antcall target="googlecode.initialize" inheritAll="true" />
		<mkdir dir="${ftpdist.dir}" />
		<copy file="${res.dir}/apache.htaccess" todir="${ftpdist.dir}" overwrite="true" />
		<antcall target="sourceforge.initialize" inheritAll="true" >
			<param name="upload.to.sftp" value="true" />
		</antcall>
		<antcall target="yinlight.initialize" inheritAll="true" >
			<param name="upload.to.sftp" value="true" />
		</antcall>
		<antcall target="dist.midp.1.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.1.0.signed" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.jsr75.signed" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.itunes" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.itunes.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.itunes" >
			<param name="sftp.no.sun" value="true" />
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.itunes.signed" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.itunes.jsr75" >
			<param name="sftp.no.sun" value="true" />
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1.itunes.signed.jsr75" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.cldc.1.1" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0.signed" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.midp.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<antcall target="dist.preprocess.2.0" >
			<param name="build.number" value="${build.number}" />
			<param name="release.buildno" value="true" />
		</antcall>
		<chmod file="${distgooglecode}/googleupload.sh" perm="744" />
		<antcall target="make.zip.files" inheritAll="true" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="./.rms" />
			<fileset dir="./" includes="**/*.tmp" />
			<fileset dir="../" includes="RSSReader-**.debug" />
		</delete>
	</target>

	<target name="dist.all" >
		<antcall target="dist.dev.status" inheritAll="true" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

	<target name="dist" >
		<antcall target="dist.all" inheritAll="true" >
			<param name="no.1.0.signed" value="true" />
			<param name="no.2.0.signed" value="true" />
			<param name="no.2.0.jsr75.signed" value="true" />
			<param name="no.2.0.itunes" value="true" />
			<param name="no.2.0.itunes.jsr75" value="true" />
			<param name="no.2.0.jsr75.signed" value="true" />
			<param name="no.2.0.cldc.1.1" value="true" />
			<param name="no.2.0.cldc.1.1.itunes" value="true" />
			<param name="no.2.0.cldc.1.1.itunes.signed" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75" value="true" />
			<param name="no.2.0.novice" value="true" />
			<param name="no.2.0.jsr238" value="true" />
		</antcall>
	</target>

	<target name="dist.no.signed" >
		<antcall target="dist" inheritAll="true" >
			<param name="no.2.0.cldc.1.1.itunes.signed" value="true" />
			<param name="no.2.0.cldc.1.1.itunes.signed.jsr75" value="true" />
		</antcall>
	</target>

	<target name="dist.test" >
		<antcall target="dist.all" inheritAll="true" >
			<param name="stage" value="test_" />
			<param name="no.1.0" value="true" />
			<param name="no.1.0.signed" value="true" />
			<param name="no.2.0" value="true" />
			<param name="no.2.0.signed" value="true" />
			<param name="no.2.0.novice" value="true" />
			<param name="no.2.0.itunes" value="true" />
			<param name="no.2.0.itunes.jsr75" value="true" />
			<param name="no.2.0.cldc.1.1" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75" value="true" />
			<param name="no.2.0.cldc.1.1.itunes" value="true" />
			<param name="no.2.0.cldc.1.1.itunes.jsr75" value="true" />
			<param name="no.2.0.jsr238" value="true" />
		</antcall>
	</target>

	<target name="dist.itunes.test" >
		<antcall target="dist.all" inheritAll="true" >
			<param name="no.2.0.novice" value="true" />
			<param name="no.1.0" value="true" />
			<param name="no.2.0" value="true" />
			<param name="no.2.0.cldc.1.1" value="true" />
			<param name="no.2.0.jsr75" value="true" />
			<param name="no.2.0.cldc.1.1.jsr75" value="true" />
			<param name="no.2.0.jsr238" value="true" />
		</antcall>
	</target>

	<target name="copy.device.bin" depends="prepare" if="midlet.home" >
		<mkdir dir="${midlet.home}/${bin}" />
		<copy file="${bin}/${project.name}.jar" tofile="${midlet.home}/${bin}/${project.name}.jar" overwrite="true" />
		<copy file="${bin}/${project.name}.jad" tofile="${midlet.home}/${bin}/${project.name}.jad" />
	</target>

	<!-- Start the MIDlet suite -->
	<target name="run" depends="prepare" >
		<wtkrun jadfile="${dist}/${build.file.root}.jad" device="DefaultColorPhone" wait="false" />

	</target>

	<target name="run.dist.version"  depends="prepare" >
		<echo message="emulator.jar=${emulator.jar}" />
		<property name="run.jar" value="${dist}/${build.file.root}.jar" />
		<echo message="jar=${run.jar}" />
		<java classname="${emulator.class}" fork="true" >
			<classpath>
				<pathelement location="${emulator.jar}" />
				<pathelement location="${run.jar}" />
			</classpath>
			<arg value="${midlet.class}" />
		</java>
	</target>

	<target name="run.dist.midp.2.0.itunes.jsr75" depends="prepare.midp2.0,prepare.cldc1.0,prepare.itunes,prepare.jsr75" unless="run.no.2.0.itunes.jsr75" >
		<antcall target="run.dist.version" inheritAll="true" >
			<param name="no.test" value="true" />
			<param name="no.staging" value="true" />
		</antcall>
	</target>

</project>
